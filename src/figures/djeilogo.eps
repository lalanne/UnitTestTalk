%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: DJEI Logo.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Brian Darling
%%CreationDate: 01/06/2011
%%BoundingBox: 0 0 317 81
%%HiResBoundingBox: 0 0 316.7984 80.7881
%%CropBox: 0 0 316.7984 80.7881
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 36 8%%BeginData: 4342 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFA87EA8FD7CFF7D7DA8A8FD7BFF7DA8A87D7DA8FD7AFFFD06%7DA8FD79FFA8A8527E52A87DFD05A87DFD72FFA87D59A8527D527D277D52%52535952A8FD6FFF7DA87D7D7DA87D53FD0552A87D7DA8FD6EFF7D527D52%52A87DA884FD057D52A87DA8FD6EFF7D52A87DFFFD07A87E527D7D7D84FD%6DFFA8527D7DA8FFA87EA8A8A87EA87D52527D527DFD6DFF7D537D7DA8FF%FD06A87D7D5253527EA8FD09FFA8FD05FFA8A8A8FFFFFFA8FD07FFA8A8FD%0AFFFD04A8FD18FFA8FD07FFA8FD05FFA8FD05FFA8FD13FF5952847DFFFF%A884A87DA87D7D527D7D537DFD09FF7D27FFFFA8FFFF7D5227A8FFFF7DA8%FFA8A8A8FFFF7D5227A8A8FFFFA852FFFFFF52527D52FFA8FFA8A8A87DFF%A8FFA8A8FFFFA8FFFD06A8FFFFA8F8FF7DA8A8FF7D7D52A8A8A852A8A8FF%A8FF7D7DA87DFFA8A8FD0EFF7D7DA8A8FFFFFD05A87E527D527DA8A8FD09%FF5252FF5252A8FF7D7D52FF527D527D527D5252A8FF7D5227A8287D527E%27FFFFFF52527D52A8527D27527D527E52A8277DFF7D527D524C52A85252%7DFFA8527D7D52A87D7D277D7D7D527DA852527D527D527D27A85952FD0D%FFA859527DA8FFFFA8A8A87E7D7D5953522752A8FD09FF272752527DA8FF%7D7D527D7D525259A8527D59A8FF7D7DFF527D527D7D52A8FFFF527EFF52%59597D527D7D7D52525952FFFFFD0452277D7D527D7DFFA859527D527D7D%2727597D2752597D525227FF59A85952A82727FD0EFFA87D7DFFFFFFFD04%A87D7D59A8A87DA8FD09FF7DA8FF5352A8A8FF7DFF7DA852FF7DA8A87D7D%A8A8FF7DA8FFA852A852FF7D7D7DFF7DA8FF7DA853A87D7DA8527D527D52%FFFF7D527D7D527E5252527DFFA8A87DA87D527D7D52A87D7D52A87E52A8%7D52A8A8A8527E5252A8FD0CFFA8527D7DFFFFFFA87DA87DA8527D7D5252%A8FD28FF52FD16FF7D7DFD2DFFA852A852FFFFFFA8A87DA85252537D527D%FD6FFFA87D7D7DFFFFFFA87E7DA852527D527D7DFD0BFF7DA8FD16FFA8FD%05FF7DFFFFFFA8FFFFFFA8FD06FFA87DA8FD1BFFA8FFFF7DA8FD0EFFA8FD%06FF527D7DA8FFFFA87DA87DA852527D52FD0CFF7D7DA8FFFFFFA9A8FFA8%FFA8FF7DFFA8FFA8FFA8FFA8FFA8A8FFFFA8FFA8A8FFFFA8A8FFAFA8A8FF%FFA8FFFFFF7DFFA8A8A8FF7EFFA8FFA8AFA8A9FFFF7DFFA8FFA8FFFFFFA8%FFA8FFA8FF7DFFFFFD04A8FFA8FFFFFFA8FFA8A9A8A8A87EFFAFFFA9A8A8%7D52847DFFFFA87DA8527D527D527DFD0CFF7DA8537D7DA8527DA8FD077D%52FD087DFFA87D52A87DFFFFA87D7D7DA8527D52A8FFFFFF5953FFFD077D%537D5952A8527D7D7DA87D7DFFA8A852A87D84537DFFFF7DA852FD057D53%7D7DA87D7D7DA853A87D7D527DFF527D7D7DFFFF7DA852FD047DA8A8FD0C%FF7D7DA87DA8A8A87D7D7DA884FF7DA8A87D7DA87DFF7DA8A8A8FFFF7D7D%A8A8FFA87DA87D7DA8A87DFF7DFFFFFF7DFFFF7D7DA884A87DFF7DFF53A8%7DFF7DFF7DA87DFFFFFF537D84A87DA87DFFFFA8A87D7DA8A87D53A8A87D%A87D53A8A87D7DA87D7D84FFA852A87DA9A8A8A87D5228527D7EFD0DFF7D%7DA8FF7DA852A97D7E7DA8FF7E7DFF7DFD05A884AF7DFFFF7EA8AF84FFA8%7DFFA87DAF7DA97DA852FFFF7D7DA87DA8A87DA87DA8A8FF7D7DFD04A87D%FFA87DFFFF7D7DA8A8A87D7DFFFF7DA87DA884FF7DA884FF7DFF7D7EA87E%7DA97DFF7DA8FF7D7DA8A87DA8A87D7DA87D5227A8FD13FFAFFD23FFA8FD%0EFFA8FD2CFF52A87D84A8A87D7D7DA852FFA8FD73FFA8A87D7DA859FD05%7DA8FD75FFA87D7D7D527DFD0452A8FD75FFA8A8A87D7D7D527D7D7DFD77%FF847D527D7DFD0452FD77FFA87D7D7DA8FD7AFFA8A87D7DA8FD7DFFA8FD%FCFFFDFCFFFDFCFFFD05FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2011-06-01T16:14:55Z</xmp:MetadataDate>
         <xmp:ModifyDate>2011-06-01T16:14:55Z</xmp:ModifyDate>
         <xmp:CreateDate>2011-06-01T16:14:55Z</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>68</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxPzPr+oDU/0FZFLW&#xA;SW3knkupC3MRrTk8Sru1OVAF+JjUfB9vCqH0HVjo1x9Tvp5X0+eNLiO4upRI8YeiiRjQcYZT2NOD&#xA;DfZtlDNMCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FUn81+YYdB0aS+fi0zMsNpE5oHmk+yCR+yN2Y9lBOKvN9Vkhu5Hs2L3etXd9ZGR2+AiVJo/iBp&#xA;II4051iahARqUYtuUKdnd69bwWdvqNs+o27G1llu7ZmMjkxWi8TEzlkLG9HJouoVfhO+KpcfMWo2&#xA;+iH07fUIbdYgWZpZbOGP1XgEQSPnwKhbuNfTRCWP+tXFU48s6leQTaZf20Qt4L24jWQQkJGUaRIZ&#xA;RJFSLdN/2W4nccVxV67gS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq8884XMmpea49PUsLXTkVJT9hBLMBK/J2ISvpLGFPbk2EIRWk2CNpI1d0Ie4vLKCyVq&#xA;fu7SG9iVAAAq/vCvMsqjkvGvTFUDpn/Hh/0Z/wDdnxVhHmee71JLDS7RJGhYRRtNG1I2cWunlw/H&#xA;4uKenxPY1bvHirI9D03Ukl0zRlt/q/xW8TTBgecKKJbiQg82V51h7Nx6bVNcVet4EuxVJtF836Fr&#xA;N5q9nYz8ptEuDa6hyHELIK1oT1FVZa+IOKo3VdXsdM0e91e5etlp8E1zcPGOZEcCl5KAdSAp2xVK&#xA;fL/nzQNbNykPr2U1pFFcTw38L2rCCfl6UwMgCsjcG3B7Yqm6arZteT2hLI9ukUjSOrLEwnLhAkhH&#xA;Bz+7NQp22r1GKq63NuzKqyozNQqAwJNRyFPmBXFWP67+YHl/QtVfTtR+so0NtHe3V1HbySwQQTSP&#xA;EjzSRhuA5RNUkUAFTiqfrd2repxmjb0QDNRgeAIqC2+22++Kqdvqdhc3l1ZQTCS5svT+tRgH4PVX&#xA;mlTSm677YqkmqefNMsNefQxZX97fxQxXEy2Vs86pHMzKjOy9KmNsVTfT9Ysr63hnjLxCdpEiiuEa&#xA;CVjC5RqRyBWpVag03FD0OKt3esaZaLE1xcognmitoqHkWlnbhGlFr9o4qiDc2wLgyoDEVEgLCqlv&#xA;s8vCvbFXPc26QmZ5UWEdZWYBetPtHbrirnuLdCVeVFYdQWAO4J7+yn7sVbFxATQSKTUL9odWFQPm&#xA;RviqV3/mrRrDzDpugXUpj1DVllexBX4H9AcnXn0DU3A74qidJ1rTtV0uy1K1lH1a/ghubcPRX9O4&#xA;QPHVT0LA9MVQS+cdDeWGNJHb6xqMmkQv6bBWu4o5JJFBIFVUQuOXSopiqNvNb061e1R5DI95ci0g&#xA;WFTKfVozENwrxCqhLE7DFUTHd2siepHNG6cvT5qwI51pxqD1rtTFUttvNWhz2N5fC49O2sLie1uX&#xA;cEFZLeZrd/h3Yj1UKg037Yqmvqxer6XNfVC8jHUcuJNK060riq7FXYq7FXluoXHDWNbvldWuoVvW&#xA;VSSrD0qRqo5D94OEdfgFR/MCtFKGcX1lHY6BYWUZrHazadChPUiO5hUePhgSwN7xre206GCRY726&#xA;+qQ2bOCyiThpDc2A/ZRVLH5U74UMY8sWOkXVys7yyacvpW6wS8j6kdYYoy249SvGN5JFYbmWpO1c&#xA;KvSfy7s7tomvLm4+sxQxJDZSFQrD10jnuAzD+8ofTTke6HAVDNMCVK7e4S1me2jEtwqMYYmPEM4B&#xA;4qW7VPfFXjEf5TefbLS5Lb63Z6h+ltLe01OKOM2pjuPrP1xXaQyy+ufVnnXlxTr08CrMY/JWoW/k&#xA;Hzd5etIIYH1Q6sNKt4yqRKl4jiFdhRBVtx2wKxu3/KvWLB50+pQ6zavLpd6Y765eWSX6pE0UtjI8&#xA;3q8o43PrQ8vhr8J6DCq3S/yn1xXsINVt7W6sYzo/1i2ZxLEIrI35kh4uPjSJbuJFqPiAxVF6H+WO&#xA;rWVzot3JawLd6bPpv79XUvHbWtrLDOiN1CkyKOI+0PlihkGt/l9Fr3na71DVTK2iTaVa2TWsNxJC&#xA;k8kVzcyyJOkZUvHxlTYmh3GBLENS/KzzA89/6FhEilb0Pd21yiz6g11qKXtq06zRvGRbLHxZJeSt&#xA;UqPhwqnHlix17ytq8MEug2KXPmCSxiluNP4xwxG3s1F0PTSMcY09GQpU0LFR3xVOT5Ha5/My78zX&#xA;iv8AVVsrOKwaK5mi/fwSTNJ6sUTosi0daCQMPbArEovyu8zRtZMbe2kuOdpwvnlHq6d9U1aa+leA&#xA;cDy+sQTBCFYbj4tsKoW2/KXXrH6jcRaXZ3Etsmly3Nu0iL61xZ3t3LMS5VgW9CdFDHt8PbFV2p/l&#xA;b5u1DUtVklsrOC21R0SdrOVLcskWsw3oekUMMnI2yv8AG8jPzr0BGKsw88+Sri98t6ZoOhadZyad&#xA;av6bW1x6X7qH0JIk9Fp4btVozjkeBbjXjvgV5zceQPM8urWuk/UVlvpEE91qDwXFIGXQmsGg/SDR&#xA;iCWFpghVUPIEmqjiThVN7b8vfPTajbalcaZai8j1G1nSJ7mOe0SCGzs7V2likiJZ+NsxR46PG32S&#xA;QTirM/PXk7U9b1FL2wZIrqxsZG0y4Y0KX8dzBcQVH8jeiyP/AJJIwKxGH8uvPFu2iwQW1m8UFj5e&#xA;ivJppjxjl0dJxKnphT6is069xtXFVPRPyx842k0b/U7C1Rb21vRbo8X1cPHpt7aSkxW8FsgUyzRb&#xA;BWYp1YkHCrWmfld5wEPoPb22nRyX0F4BbSQqkR/RN1YyskdvDbRqVlkjI4ruvUkg4q1bflb5khkh&#xA;kOh6XJpymKGXy+81LYyJZC2N/wAli+1yHQKH4715Yqq3/wCUmryW9/JFYWb3d3Lq88oLKBMbjVrW&#xA;7s1ZiG/494ZV3+zyp3OKpxYeT/NA/MSy8yS6ZY2dqjyCf6q8KuIJbFIlRisCSytHLHQ8peNAvFR2&#xA;VemYFdirsVeWXtrI+s+YbEVjF2k4lYkBGLSF0FOMlTxYHcoD/N1woZtdX63/AJb06/2VbuTTZ6dg&#xA;JLmF/E+PjgS8oum+vacpneS2i1K2FshapWG2t4NOla44IOX7/gte/Ch7HChF6c0VlpD87aWa6ctc&#xA;SWkw5JLeM5jiiAiCenxjbirH4WotBXbFXrHl3SF0fQ7LTAwdraJUlkApzkO8j0/y3JbAlMcVdirC&#xA;dK8+X0UNrc6/BDFaX9mb2zntfUY/AUDROjV+L94KUOGkI9vzF8uJ6HIzj1iwf9037nhJ6Tman2Qr&#xA;kA/PGkoi688aJaNcrdie3NqYuYkhdSVmk9JXUEVK8sFKoxefNMYzF7e5RY5re3iT0ZPUeS5hEyjh&#xA;xFD8VKfT0Iw0rj+YXl30DKpuG+GJoo/QkV5fW58fTVgvKnovU9NsaVf/AI80BvTMRmlSZEeORIXZ&#xA;P3sbSopIB+JghHHrXGlRUXmW2Hl6z1i5ikj+tpCVtUVmkMs9AsSAhSx5NQHoevTAqFsvNX6R1yys&#xA;7FKWc1tLczvLHIJA0cno+mOiqVcHlWvSmKojVfMcemaqkFwALP6nLdO6hmkLpNDEiKB15Ganzpiq&#xA;XyfmBpsV2gljmS0KH12MT84JVnEDLMBsgDEb++2GlTzStYstUikms+bQRuUErKVRypIJQn7QqKYF&#xA;SSbzNqTebJ9Fhms4khaEJHMsxmkV4xI/EoeAoK0rhVub8wtIAT0IbiV2nhiAMMgqstwbdnTirFuL&#xA;K3QbnbqcaVVl/MDy5DJdpJJIos/7yQxngwE62ztG37QSVwGwUqmfzE8vLcSwSC4iaKJpmaSFlWiw&#xA;fWeNT+2YqkKfD5YaVcPPekmT1OTfU3hR4P3biWR3mMKhFIoVYj4fv6Y0qMtvNuj3GsDSEMgu2BCl&#xA;42VC6IJHj5H9tVarDArtQ816Zp93Na3aTxtFDLcCQxMI3WCP1ZBGx+0QmKpdqX5gaZDp13NZxzTX&#xA;UEVw6xNC44mCNHDSrsyxn1o9/ftvhpU11vUr6zu9JjthEY767FtP6gYsFMby1Tiy70iI38cCoG38&#xA;+6FcQLNGtyVkMIhUwPyk+sep6RRaVYEwuK+2NKtf8wvLyRiYeu9uYllM6xEopeE3CxMe0hiHKmGl&#xA;RNz5x0eBWkYTNbpMbeS5SJmiRhxBLP0pVwPHr4YFQa+eLX4ZpU+rWaT30M7SrIH42QY8kBVeoQ1H&#xA;bp1w0qpN5+0SCPlPFdRyr63q27QP6sYt0jkkMiivEBJlavSmClSnWdLjg85yTqrI9/Et560fMyS/&#xA;VIXilgXgQVHH0ztRiSOtMKEFNNdPaDynPbqkZvree4PLmn1Ca8iLxIwIYN60hjCndY9+tMVY3YaZ&#xA;LqV1aXlrMIpLiG14QvH6oCWUcaqgUhRykZIm4g/Zchvs4qy3yzBqF5f2dtfW6mK3X6884YMpCuwi&#xA;iKj7H7+rr1/u8VZ9gS7FXYqxSD8vLFbE2lzfXN0Etvqdoz+kBBEHWQcFVAC3KNalq1pTDatXPkeS&#xA;5u41kvWWw+qtb3QjWGN5uUyylGRIggQhaVWjfjjar4Py+0+G8W6F5cOwkSUqwi3MVyLpOTKisx5A&#xA;gsxJIPXpjao2byrDLrD6ibuYK9zFeNagR+n60MQhU148/sL05YFQc/kHT5VtyLmVZbSKCK3crG4B&#xA;tzKVZkdWVuQuGBBGG1RcnlCykZWaaT4ZIJTQRrVoI2iGyKqjkHJNAN8CqqeW0/QVvpUl5NIbQxNb&#xA;XlIxKjQMGiIATh8PEDddx1xVrSPLFpplzFcxzSSypDLE7Scau083rySNxA+Iue21MVQR8iWr3t7c&#xA;z6hdzi5Ro7eN3DfVw8y3BMbMCdpI1K8q0p3w2q1/INo7Oz39yzXPL6+f3f7/AJyrK3L4KL9kKONK&#xA;DG1VtP8ALV5p+sevBeO1pcSSXN8pEcfOQII4lCRIi78mZ27kLgVES+Xbr9LXOo2mqz2n1sxtcW6R&#xA;wOjekoQbyRuwqB2OKoJvIdl6cYju54pYQnoygRkq0d0btWoylT8bU3HTDar4/I9kkc8X1mQxTTrc&#xA;KpjhDIy3C3TfvAgkYM6/tN0wKp3/AJJXUrzU5L27kW1vJWkhtoivEFrFbP1GqnLmtX2Dcfs4qi9V&#xA;8p2+oeoTcvEZLRLJhwikUxoxfdZUcVqcVa0byja6TeG4guZZVIBKTLE7F/TWMuZSnq1YLWgalScV&#xA;Q2o+QrC+vrq8a7nSS6EwdQIiALi3+ruORQvTjuoLUHbDaqeofl7YXf1ore3Nu14JFnaIoOUcscKG&#xA;M1U7VtkO3uOhxtU71TSPr9xp8xuHh/R9wLlUQIQ7BSlG5AmnF2G3jgVLrTyXY231HjPK31BLRI68&#xA;fiFn63Dlt+19ZavyGKqNr5A0u3S2hM80lrCIzJbNw4SyRQm3SRyF519M9A1NhhtVGT8t9KfTrax+&#xA;t3AW3jljMv7pmczSeqznmj8W5gbrQkbHbG1REnkaxmEsdzdTTW8kl3L6JEYCm+VlloQoPWQla9Mb&#xA;Vz+RrSVrmW4vLie5vIbqC4uH9MMwuoooa0VVUcEgWm3zwKmevaU+o2aiBxFfWzieymPRZVBA5Ur8&#xA;LAlT86jcDFXmPmKGHUNP03TRd/U9Vu5jDI5DKbRIZAJ2l4PWQcgErypsKH4QwKEPYXSRzXF5MbrT&#xA;lSZbVZ4Le4ms447UBWZLpY6ENKJHFPs1CkUDcVXofkG2m/Qi6jcBhPqFJUDjiywDaFaEAgMKyUPQ&#xA;ucSlkuBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqh&#xA;9SivJtOuobKYW97JDIltcMOSxyspCOV7hWoaYqwiH8vNTn1P176eKC3jCpC0Es08wj9VrhxzmUMH&#xA;aeQn1OZ2A+Gu4NoZ1aWltaW0VrbRiK3hUJHGvQKMCVXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:74117FE5200711689734BD09129BE179</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:74117FE5200711689734BD09129BE179</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:74117FE4200711689734BD09129BE179</stRef:instanceID>
            <stRef:documentID>xmp.did:74117FE4200711689734BD09129BE179</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D27F11740720681191099C3B601C4548</stEvt:instanceID>
                  <stEvt:when>2008-04-17T14:19:15+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T16:23:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T17:10:45-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EF7F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T22:53:33-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T23:07:07-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:35:43-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:40:59-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:26:55-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:20-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:30:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:31:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B233668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T12:23:46-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B333668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:27:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B433668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:46:13-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:47:57-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:51:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:52:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T13:28:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FF7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T16:23:53-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07C3BD25102DDD1181B594070CEB88D9</stEvt:instanceID>
                  <stEvt:when>2008-05-28T16:45:26-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068119098B097FDA39BEF</stEvt:instanceID>
                  <stEvt:when>2008-06-02T13:25:25-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BB1DBF8F242B6F84</stEvt:instanceID>
                  <stEvt:when>2008-06-09T14:58:36-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811ACAFB8DA80854E76</stEvt:instanceID>
                  <stEvt:when>2008-06-11T14:31:27-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811834383CD3A8D2303</stEvt:instanceID>
                  <stEvt:when>2008-06-11T22:37:35-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811818C85DF6A1A75C3</stEvt:instanceID>
                  <stEvt:when>2008-06-27T14:40:42-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FE4200711689734BD09129BE179</stEvt:instanceID>
                  <stEvt:when>2011-06-01T16:14:27Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FE5200711689734BD09129BE179</stEvt:instanceID>
                  <stEvt:when>2011-06-01T16:14:55Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>True</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>148.498429</stDim:w>
            <stDim:h>210.001652</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Red</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Green</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Magenta</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=90 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000004</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 Y=90 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.000001</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>30.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>30.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 Y=45 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>45.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>14.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=25 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 Y=35 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>35.000004</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 Y=50 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>5.000001</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=60 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 Y=65 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>55.000000</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>39.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 Y=65 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>30.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 Y=80 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 Y=90 K=35</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>89.999405</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>79.998795</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>69.999702</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>59.999104</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>39.999401</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>29.998802</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>19.999701</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>9.999103</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>4.998803</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Brights</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=60 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>60.000004</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.003099</xmpG:yellow>
                           <xmpG:black>0.003099</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -80.7881 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 80.7881 li
316.798 80.7881 li
316.798 0 li
cp
clp
[1 0 0 1 0 0 ]ct
73.856 33.2544 mo
72.3477 28.3926 li
72.335 28.3662 72.3218 28.3403 72.2827 28.3403 cv
72.2441 28.3403 72.231 28.3794 72.2178 28.4053 cv
70.8008 33.2544 li
73.856 33.2544 li
cp
74.2329 34.3594 mo
70.4629 34.3594 li
69.8647 36.3486 li
68.4736 36.3486 li
71.5547 26.8062 li
73.0498 26.8062 li
76.2739 36.3486 li
74.8828 36.3486 li
74.2329 34.3594 li
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 nzopmsc
f
77.4434 29.8096 mo
78.5098 29.3804 li
78.5098 30.7065 li
78.5098 30.7583 78.5488 30.8364 78.6138 30.8364 cv
78.6787 30.8364 78.7695 30.7324 78.8345 30.6543 cv
79.0947 30.3032 li
79.4976 29.7573 80.0435 29.4326 80.7324 29.4326 cv
81.0449 29.4326 81.3564 29.5103 81.6167 29.6924 cv
81.8896 29.8745 82.1108 30.1733 82.1108 31.1616 cv
82.1108 36.3486 li
80.9668 36.3486 li
80.9668 31.1875 li
80.9668 31.0054 80.9668 30.2905 80.2905 30.2905 cv
79.6797 30.2905 79.1855 30.9404 79.1206 31.0186 cv
78.7178 31.5513 78.6138 31.7334 78.6138 31.7466 cv
78.6138 36.3486 li
77.4434 36.3486 li
77.4434 29.8096 li
cp
f
89.4429 27.9243 mo
89.4429 31.0835 li
90.1709 31.0967 91.1069 31.0967 91.6006 30.9922 cv
92.1211 30.8755 92.9399 30.6025 92.9399 29.5361 cv
92.9399 28.4185 92.186 27.9243 90.7559 27.9243 cv
89.4429 27.9243 li
cp
88.1167 26.8062 mo
91.0547 26.8062 li
93.7197 26.8062 94.292 28.4185 94.292 29.3936 cv
94.292 31.1875 93.1089 31.6685 92.251 31.9414 cv
94.7471 36.3486 li
93.187 36.3486 li
90.9248 32.1104 li
89.4556 32.1104 li
89.4556 36.3486 li
88.1167 36.3486 li
88.1167 26.8062 li
cp
f
96.7485 33.0337 mo
96.7485 33.5537 96.9307 35.4775 98.2827 35.4775 cv
99.5308 35.4775 99.7515 33.8916 99.7515 32.9165 cv
99.7515 32.4614 99.6738 31.7466 99.5176 31.3047 cv
99.3613 30.8623 99.0757 30.5762 98.7637 30.4463 cv
98.6074 30.3813 98.4385 30.3555 98.2695 30.3555 cv
96.9824 30.3555 96.7485 31.9805 96.7485 33.0337 cv
cp
98.2178 29.3804 mo
99.5044 29.3804 100.128 30.0566 100.479 30.7192 cv
100.792 31.3174 100.987 32.3184 100.987 32.9814 cv
100.987 35.0225 99.9468 36.4917 98.2695 36.4917 cv
97.0864 36.4917 96.5923 35.8809 96.3325 35.5557 cv
95.8252 34.9185 95.6045 33.9956 95.6045 32.8257 cv
95.6045 30.4595 96.8135 29.3804 98.2178 29.3804 cv
cp
f
102.598 29.5493 mo
103.769 29.5493 li
103.769 36.3486 li
102.598 36.3486 li
102.598 29.5493 li
cp
102.417 27.0532 mo
103.924 27.0532 li
103.924 28.2881 li
102.417 28.2881 li
102.417 27.0532 li
cp
f
105.705 29.8096 mo
106.771 29.3804 li
106.771 30.7065 li
106.771 30.7583 106.811 30.8364 106.875 30.8364 cv
106.94 30.8364 107.031 30.7324 107.096 30.6543 cv
107.356 30.3032 li
107.759 29.7573 108.305 29.4326 108.994 29.4326 cv
109.307 29.4326 109.618 29.5103 109.878 29.6924 cv
110.151 29.8745 110.373 30.1733 110.373 31.1616 cv
110.373 36.3486 li
109.229 36.3486 li
109.229 31.1875 li
109.229 31.0054 109.229 30.2905 108.552 30.2905 cv
107.941 30.2905 107.447 30.9404 107.382 31.0186 cv
106.979 31.5513 106.875 31.7334 106.875 31.7466 cv
106.875 36.3486 li
105.705 36.3486 li
105.705 29.8096 li
cp
f
112.01 29.8096 mo
113.077 29.3804 li
113.077 30.7065 li
113.077 30.7583 113.115 30.8364 113.181 30.8364 cv
113.246 30.8364 113.336 30.7324 113.401 30.6543 cv
113.662 30.3032 li
114.064 29.7573 114.61 29.4326 115.3 29.4326 cv
115.611 29.4326 115.924 29.5103 116.184 29.6924 cv
116.457 29.8745 116.678 30.1733 116.678 31.1616 cv
116.678 36.3486 li
115.534 36.3486 li
115.534 31.1875 li
115.534 31.0054 115.534 30.2905 114.857 30.2905 cv
114.247 30.2905 113.752 30.9404 113.688 31.0186 cv
113.285 31.5513 113.181 31.7334 113.181 31.7466 cv
113.181 36.3486 li
112.01 36.3486 li
112.01 29.8096 li
cp
f
124.049 27.9243 mo
124.049 31.4082 li
124.218 31.4214 124.387 31.4214 124.569 31.4214 cv
126.168 31.4214 127.455 31.2393 127.455 29.6924 cv
127.455 27.9243 125.531 27.9243 124.868 27.9243 cv
124.049 27.9243 li
cp
122.723 26.8062 mo
124.79 26.8062 li
125.817 26.8062 126.883 26.8711 127.715 27.4692 cv
128.482 28.0024 128.885 28.7563 128.885 29.7183 cv
128.885 30.9146 128.3 31.5386 127.91 31.8506 cv
127.091 32.5005 126.09 32.5527 125.206 32.5527 cv
124.049 32.5527 li
124.049 36.3486 li
122.723 36.3486 li
122.723 26.8062 li
cp
f
130.795 33.0337 mo
130.795 33.5537 130.978 35.4775 132.33 35.4775 cv
133.578 35.4775 133.798 33.8916 133.798 32.9165 cv
133.798 32.4614 133.721 31.7466 133.564 31.3047 cv
133.408 30.8623 133.123 30.5762 132.811 30.4463 cv
132.654 30.3813 132.485 30.3555 132.316 30.3555 cv
131.029 30.3555 130.795 31.9805 130.795 33.0337 cv
cp
132.265 29.3804 mo
133.551 29.3804 134.175 30.0566 134.526 30.7192 cv
134.838 31.3174 135.034 32.3184 135.034 32.9814 cv
135.034 35.0225 133.994 36.4917 132.316 36.4917 cv
131.133 36.4917 130.639 35.8809 130.379 35.5557 cv
129.872 34.9185 129.651 33.9956 129.651 32.8257 cv
129.651 30.4595 130.86 29.3804 132.265 29.3804 cv
cp
f
139.389 30.9014 mo
138.882 30.5376 138.531 30.2773 137.854 30.2773 cv
137.14 30.2773 136.84 30.7324 136.84 31.1743 cv
136.84 31.6816 137.244 31.9414 137.66 32.1494 cv
138.751 32.6953 li
139.128 32.8774 140.013 33.3193 140.013 34.4766 cv
140.013 35.6855 139.077 36.5308 137.776 36.5308 cv
136.789 36.5308 136.178 36.1406 135.774 35.8809 cv
136.229 34.9966 li
136.879 35.5166 137.27 35.6855 137.815 35.6855 cv
138.557 35.6855 138.973 35.1787 138.973 34.6196 cv
138.973 34.0605 138.7 33.8916 137.595 33.3457 cv
136.347 32.7344 135.878 32.2144 135.878 31.3174 cv
135.878 30.1343 136.828 29.4453 137.907 29.4453 cv
138.388 29.4453 138.908 29.4712 139.727 29.9785 cv
139.389 30.9014 li
cp
f
140.428 30.0952 mo
141.403 30.0952 li
141.403 28.5483 li
142.495 27.4951 li
142.625 27.4951 li
142.625 30.0952 li
143.704 30.0952 li
143.704 30.8364 li
142.56 30.8364 li
142.56 34.8794 li
142.56 35.0098 142.56 35.4907 143.132 35.4907 cv
143.522 35.4907 143.951 35.2827 144.276 35.1138 cv
144.276 36.1406 li
143.925 36.3354 143.34 36.4785 142.95 36.4785 cv
142.638 36.4785 141.39 36.3745 141.39 35.0225 cv
141.39 30.8364 li
140.428 30.8364 li
140.428 30.0952 li
cp
f
147.02 34.6328 mo
146.876 35.0488 li
145.498 38.7148 li
144.406 38.7148 li
145.966 34.6328 li
147.02 34.6328 li
cp
f
152.167 26.8062 mo
158.043 26.8062 li
158.043 28.0151 li
153.532 28.0151 li
153.532 30.9014 li
156.782 30.9014 li
156.782 32.1104 li
153.532 32.1104 li
153.532 36.3486 li
152.167 36.3486 li
152.167 26.8062 li
cp
f
159.265 29.5493 mo
160.435 29.5493 li
160.435 36.3486 li
159.265 36.3486 li
159.265 29.5493 li
cp
159.083 27.0532 mo
160.591 27.0532 li
160.591 28.2881 li
159.083 28.2881 li
159.083 27.0532 li
cp
f
163.152 33.0337 mo
163.152 33.5537 163.333 35.4775 164.686 35.4775 cv
165.934 35.4775 166.155 33.8916 166.155 32.9165 cv
166.155 32.4614 166.078 31.7466 165.921 31.3047 cv
165.765 30.8623 165.479 30.5762 165.167 30.4463 cv
165.011 30.3813 164.841 30.3555 164.673 30.3555 cv
163.386 30.3555 163.152 31.9805 163.152 33.0337 cv
cp
164.621 29.3804 mo
165.908 29.3804 166.532 30.0566 166.882 30.7192 cv
167.195 31.3174 167.39 32.3184 167.39 32.9814 cv
167.39 35.0225 166.35 36.4917 164.673 36.4917 cv
163.49 36.4917 162.996 35.8809 162.736 35.5557 cv
162.228 34.9185 162.007 33.9956 162.007 32.8257 cv
162.007 30.4595 163.216 29.3804 164.621 29.3804 cv
cp
f
168.69 29.8096 mo
169.756 29.3804 li
169.756 30.7065 li
169.756 30.7583 169.794 30.8364 169.861 30.8364 cv
169.925 30.8364 170.016 30.7324 170.082 30.6543 cv
170.341 30.3032 li
170.744 29.7573 171.291 29.4326 171.98 29.4326 cv
172.291 29.4326 172.603 29.5103 172.863 29.6924 cv
173.136 29.8745 173.357 30.1733 173.357 31.1616 cv
173.357 36.3486 li
172.213 36.3486 li
172.213 31.1875 li
172.213 31.0054 172.213 30.2905 171.537 30.2905 cv
170.926 30.2905 170.432 30.9404 170.367 31.0186 cv
169.964 31.5513 169.861 31.7334 169.861 31.7466 cv
169.861 36.3486 li
168.69 36.3486 li
168.69 29.8096 li
cp
f
174.228 30.0952 mo
175.203 30.0952 li
175.203 28.5483 li
176.294 27.4951 li
176.425 27.4951 li
176.425 30.0952 li
177.503 30.0952 li
177.503 30.8364 li
176.36 30.8364 li
176.36 34.8794 li
176.36 35.0098 176.36 35.4907 176.931 35.4907 cv
177.322 35.4907 177.751 35.2827 178.076 35.1138 cv
178.076 36.1406 li
177.725 36.3354 177.14 36.4785 176.75 36.4785 cv
176.438 36.4785 175.19 36.3745 175.19 35.0225 cv
175.19 30.8364 li
174.228 30.8364 li
174.228 30.0952 li
cp
f
182.808 32.8257 mo
181.378 32.8384 180.091 33.3848 180.091 34.5806 cv
180.091 35.1523 180.481 35.6465 181.105 35.6465 cv
181.859 35.6465 182.457 35.0356 182.808 34.6846 cv
182.808 32.8257 li
cp
184.003 34.8276 mo
184.003 35.1787 184.003 35.5947 184.589 35.5684 cv
184.589 36.4917 li
184.017 36.4658 183.614 36.4268 183.263 36.0366 cv
183.159 35.9326 182.964 35.6729 182.925 35.3604 cv
182.886 35.3345 li
182.808 35.3867 182.522 35.6855 182.457 35.7378 cv
181.677 36.4136 181.169 36.4785 180.558 36.4785 cv
179.597 36.4785 178.908 35.6855 178.908 34.8145 cv
178.908 33.9697 179.31 33.3325 179.909 32.8906 cv
180.65 32.3447 181.69 32.1494 182.808 32.1367 cv
182.808 31.2524 li
182.808 30.9795 182.808 30.3164 181.742 30.3164 cv
181.066 30.3164 180.364 30.6675 179.779 31.0313 cv
179.271 30.1602 li
180.117 29.7056 180.728 29.3804 181.82 29.3804 cv
182.3 29.3804 182.964 29.5103 183.38 29.8354 cv
183.861 30.2124 184.003 30.7192 184.003 31.3955 cv
184.003 34.8276 li
cp
f
185.81 29.8096 mo
186.903 29.3672 li
186.903 31.5254 li
186.903 31.6035 186.929 31.6816 186.968 31.6816 cv
187.111 31.6816 li
187.189 31.5903 187.449 31.1484 187.513 31.0576 cv
188.384 29.7573 189.216 29.4194 189.399 29.3672 cv
189.399 31.2915 li
189.255 31.2656 189.113 31.2524 188.97 31.2524 cv
188.164 31.2524 187.5 31.7983 187.019 32.4614 cv
187.019 36.3486 li
185.81 36.3486 li
185.81 29.8096 li
cp
f
197.718 32.8257 mo
196.289 32.8384 195.001 33.3848 195.001 34.5806 cv
195.001 35.1523 195.392 35.6465 196.016 35.6465 cv
196.77 35.6465 197.369 35.0356 197.718 34.6846 cv
197.718 32.8257 li
cp
198.916 34.8276 mo
198.916 35.1787 198.916 35.5947 199.5 35.5684 cv
199.5 36.4917 li
198.928 36.4658 198.525 36.4268 198.173 36.0366 cv
198.07 35.9326 197.875 35.6729 197.835 35.3604 cv
197.796 35.3345 li
197.718 35.3867 197.433 35.6855 197.369 35.7378 cv
196.587 36.4136 196.082 36.4785 195.47 36.4785 cv
194.507 36.4785 193.819 35.6855 193.819 34.8145 cv
193.819 33.9697 194.222 33.3325 194.82 32.8906 cv
195.561 32.3447 196.601 32.1494 197.718 32.1367 cv
197.718 31.2524 li
197.718 30.9795 197.718 30.3164 196.653 30.3164 cv
195.977 30.3164 195.275 30.6675 194.69 31.0313 cv
194.183 30.1602 li
195.028 29.7056 195.638 29.3804 196.731 29.3804 cv
197.212 29.3804 197.875 29.5103 198.291 29.8354 cv
198.772 30.2124 198.916 30.7192 198.916 31.3955 cv
198.916 34.8276 li
cp
f
204.335 32.5264 mo
204.335 30.9404 203.621 30.2646 202.789 30.2646 cv
201.437 30.2646 201.437 32.1104 201.437 32.7085 cv
201.437 33.1377 201.541 34.7104 202.776 34.7104 cv
203.218 34.7104 204.335 34.3984 204.335 32.5264 cv
cp
204.492 29.5234 mo
205.427 29.5234 li
205.427 35.6465 li
205.427 36.0234 205.311 36.6606 205.272 36.7905 cv
205.259 36.8555 205.011 37.6616 204.14 38.0259 cv
203.958 38.1035 203.439 38.3247 202.632 38.3247 cv
202.412 38.3247 201.71 38.2988 201.034 38.1167 cv
201.034 36.9336 li
201.515 36.9336 li
201.697 37.1675 201.905 37.4146 202.646 37.4146 cv
203.283 37.4146 203.686 37.1289 203.724 37.1025 cv
204.284 36.7129 204.284 35.9585 204.284 35.6465 cv
204.284 34.6587 li
204.232 34.5938 li
204.14 34.5938 204.128 34.6196 204.011 34.8276 cv
203.894 35.0356 203.414 35.6597 202.464 35.6597 cv
201.58 35.6597 200.995 35.0874 200.669 34.4375 cv
200.306 33.7095 200.28 32.9424 200.28 32.2402 cv
200.28 30.6152 201.255 29.3936 202.438 29.3936 cv
203.478 29.3936 203.919 29.9395 204.193 30.4595 cv
204.296 30.6416 204.296 30.6675 204.375 30.7065 cv
204.427 30.6807 204.492 30.6543 204.492 30.5376 cv
204.492 29.5234 li
cp
f
210.627 36.5176 mo
210.627 35.2568 li
210.627 35.2046 210.601 35.0874 210.55 35.0874 cv
210.498 35.0874 210.472 35.0874 210.433 35.1265 cv
210.277 35.2954 210.082 35.6074 209.886 35.8286 cv
209.484 36.2578 208.976 36.5049 208.431 36.5049 cv
207.689 36.5049 207.066 36.0366 207.066 34.7886 cv
207.066 29.5493 li
208.236 29.5493 li
208.236 34.4507 li
208.236 34.7886 208.236 35.6465 208.937 35.6465 cv
209.509 35.6465 209.913 35.0615 210.576 34.1255 cv
210.576 29.5493 li
211.707 29.5493 li
211.707 36.1274 li
210.627 36.5176 li
cp
f
216.425 30.9014 mo
215.919 30.5376 215.568 30.2773 214.892 30.2773 cv
214.177 30.2773 213.877 30.7324 213.877 31.1743 cv
213.877 31.6816 214.281 31.9414 214.697 32.1494 cv
215.789 32.6953 li
216.166 32.8774 217.05 33.3193 217.05 34.4766 cv
217.05 35.6855 216.114 36.5308 214.814 36.5308 cv
213.826 36.5308 213.214 36.1406 212.812 35.8809 cv
213.267 34.9966 li
213.917 35.5166 214.306 35.6855 214.853 35.6855 cv
215.593 35.6855 216.009 35.1787 216.009 34.6196 cv
216.009 34.0605 215.737 33.8916 214.632 33.3457 cv
213.384 32.7344 212.916 32.2144 212.916 31.3174 cv
212.916 30.1343 213.865 29.4453 214.944 29.4453 cv
215.425 29.4453 215.945 29.4712 216.763 29.9785 cv
216.425 30.9014 li
cp
f
222.548 26.8062 mo
224.239 26.8062 li
227.007 32.9424 li
227.007 32.9556 227.384 33.8784 227.398 33.8916 cv
227.462 34.0605 227.736 34.8145 227.788 34.9707 cv
227.814 34.9707 227.839 34.9834 227.866 34.9834 cv
227.917 34.9316 227.917 34.9185 227.917 34.7886 cv
227.917 34.6455 227.866 33.9956 227.866 33.8657 cv
227.839 33.2676 227.839 32.7734 227.839 32.4482 cv
227.839 26.8062 li
228.931 26.8062 li
228.931 36.3486 li
227.267 36.3486 li
224.486 30.1475 li
224.134 29.3545 223.784 28.3271 223.718 28.1191 cv
223.706 28.1064 223.667 28.1064 223.654 28.0933 cv
223.576 28.1582 223.576 28.1714 223.576 28.2363 cv
223.576 28.5093 223.64 29.9395 223.64 30.0044 cv
223.64 36.3486 li
222.548 36.3486 li
222.548 26.8062 li
cp
f
234.742 36.5176 mo
234.742 35.2568 li
234.742 35.2046 234.716 35.0874 234.664 35.0874 cv
234.613 35.0874 234.586 35.0874 234.547 35.1265 cv
234.391 35.2954 234.197 35.6074 234.001 35.8286 cv
233.598 36.2578 233.091 36.5049 232.545 36.5049 cv
231.804 36.5049 231.18 36.0366 231.18 34.7886 cv
231.18 29.5493 li
232.35 29.5493 li
232.35 34.4507 li
232.35 34.7886 232.35 35.6465 233.052 35.6465 cv
233.625 35.6465 234.027 35.0615 234.691 34.1255 cv
234.691 29.5493 li
235.822 29.5493 li
235.822 36.1274 li
234.742 36.5176 li
cp
f
241.437 27.0532 mo
239.734 28.8862 li
238.863 28.8862 li
240.021 27.0532 li
241.437 27.0532 li
cp
240.761 32.8257 mo
239.332 32.8384 238.044 33.3848 238.044 34.5806 cv
238.044 35.1523 238.435 35.6465 239.058 35.6465 cv
239.812 35.6465 240.411 35.0356 240.761 34.6846 cv
240.761 32.8257 li
cp
241.958 34.8276 mo
241.958 35.1787 241.958 35.5947 242.542 35.5684 cv
242.542 36.4917 li
241.97 36.4658 241.568 36.4268 241.216 36.0366 cv
241.113 35.9326 240.917 35.6729 240.878 35.3604 cv
240.839 35.3345 li
240.761 35.3867 240.476 35.6855 240.411 35.7378 cv
239.63 36.4136 239.124 36.4785 238.512 36.4785 cv
237.55 36.4785 236.861 35.6855 236.861 34.8145 cv
236.861 33.9697 237.264 33.3325 237.863 32.8906 cv
238.603 32.3447 239.644 32.1494 240.761 32.1367 cv
240.761 31.2524 li
240.761 30.9795 240.761 30.3164 239.695 30.3164 cv
239.019 30.3164 238.318 30.6675 237.732 31.0313 cv
237.226 30.1602 li
238.07 29.7056 238.681 29.3804 239.773 29.3804 cv
240.254 29.3804 240.917 29.5103 241.333 29.8354 cv
241.814 30.2124 241.958 30.7192 241.958 31.3955 cv
241.958 34.8276 li
cp
f
244.089 27.0791 mo
245.09 26.6631 li
245.259 26.6631 li
245.259 36.3486 li
244.089 36.3486 li
244.089 27.0791 li
cp
f
250.498 32.8257 mo
249.068 32.8384 247.781 33.3848 247.781 34.5806 cv
247.781 35.1523 248.171 35.6465 248.795 35.6465 cv
249.549 35.6465 250.148 35.0356 250.498 34.6846 cv
250.498 32.8257 li
cp
251.695 34.8276 mo
251.695 35.1787 251.695 35.5947 252.279 35.5684 cv
252.279 36.4917 li
251.708 36.4658 251.304 36.4268 250.953 36.0366 cv
250.849 35.9326 250.654 35.6729 250.615 35.3604 cv
250.576 35.3345 li
250.498 35.3867 250.212 35.6855 250.148 35.7378 cv
249.367 36.4136 248.861 36.4785 248.25 36.4785 cv
247.287 36.4785 246.598 35.6855 246.598 34.8145 cv
246.598 33.9697 247.001 33.3325 247.599 32.8906 cv
248.34 32.3447 249.38 32.1494 250.498 32.1367 cv
250.498 31.2524 li
250.498 30.9795 250.498 30.3164 249.432 30.3164 cv
248.756 30.3164 248.054 30.6675 247.469 31.0313 cv
246.962 30.1602 li
247.807 29.7056 248.417 29.3804 249.51 29.3804 cv
249.992 29.3804 250.654 29.5103 251.07 29.8354 cv
251.551 30.2124 251.695 30.7192 251.695 31.3955 cv
251.695 34.8276 li
cp
f
253.814 29.5493 mo
254.984 29.5493 li
254.984 36.3486 li
253.814 36.3486 li
253.814 29.5493 li
cp
256.037 27.0532 mo
254.333 28.8862 li
253.462 28.8862 li
254.619 27.0532 li
256.037 27.0532 li
cp
f
257.726 33.0337 mo
257.726 33.5537 257.909 35.4775 259.261 35.4775 cv
260.509 35.4775 260.73 33.8916 260.73 32.9165 cv
260.73 32.4614 260.652 31.7466 260.496 31.3047 cv
260.339 30.8623 260.054 30.5762 259.742 30.4463 cv
259.585 30.3813 259.417 30.3555 259.248 30.3555 cv
257.96 30.3555 257.726 31.9805 257.726 33.0337 cv
cp
259.195 29.3804 mo
260.482 29.3804 261.107 30.0566 261.458 30.7192 cv
261.769 31.3174 261.964 32.3184 261.964 32.9814 cv
261.964 35.0225 260.925 36.4917 259.248 36.4917 cv
258.064 36.4917 257.57 35.8809 257.31 35.5557 cv
256.804 34.9185 256.583 33.9956 256.583 32.8257 cv
256.583 30.4595 257.792 29.3804 259.195 29.3804 cv
cp
f
266.501 31.4346 mo
266.398 31.1353 266.137 30.3555 265.344 30.3555 cv
264.539 30.3555 263.927 31.2002 263.927 32.6045 cv
263.927 33.1768 263.966 33.9175 264.135 34.3857 cv
264.318 34.8794 264.707 35.4907 265.449 35.4907 cv
266.164 35.4907 266.501 34.8794 266.605 34.1904 cv
267.646 34.6587 li
267.424 35.7764 266.605 36.4917 265.449 36.4917 cv
262.848 36.4917 262.783 33.4365 262.783 33.0596 cv
262.783 32.4097 262.783 31.3306 263.472 30.3813 cv
264.07 29.5625 264.837 29.4063 265.305 29.4063 cv
265.578 29.4063 266.514 29.4844 267.047 30.1992 cv
267.294 30.5244 267.346 30.6152 267.49 30.9404 cv
266.501 31.4346 li
cp
f
268.789 27.0791 mo
269.958 26.5981 li
269.958 30.6025 li
269.958 30.6934 269.986 30.7324 270.064 30.7324 cv
270.128 30.7324 270.271 30.4985 270.388 30.3296 cv
270.896 29.5752 271.519 29.3804 272.105 29.3804 cv
273.066 29.3804 273.457 30.0435 273.457 31.0313 cv
273.457 36.3486 li
272.298 36.3486 li
272.298 31.0703 li
272.298 30.5762 272.144 30.2515 271.65 30.2515 cv
271.402 30.2515 271.142 30.3682 270.896 30.5635 cv
270.556 30.8364 270.207 31.3564 269.958 31.7207 cv
269.958 36.3486 li
268.789 36.3486 li
268.789 27.0791 li
cp
f
274.378 30.0952 mo
275.353 30.0952 li
275.353 28.5483 li
276.445 27.4951 li
276.576 27.4951 li
276.576 30.0952 li
277.656 30.0952 li
277.656 30.8364 li
276.511 30.8364 li
276.511 34.8794 li
276.511 35.0098 276.511 35.4907 277.083 35.4907 cv
277.472 35.4907 277.902 35.2827 278.226 35.1138 cv
278.226 36.1406 li
277.876 36.3354 277.291 36.4785 276.9 36.4785 cv
276.589 36.4785 275.341 36.3745 275.341 35.0225 cv
275.341 30.8364 li
274.378 30.8364 li
274.378 30.0952 li
cp
f
282.958 32.8257 mo
281.529 32.8384 280.242 33.3848 280.242 34.5806 cv
280.242 35.1523 280.632 35.6465 281.255 35.6465 cv
282.009 35.6465 282.609 35.0356 282.958 34.6846 cv
282.958 32.8257 li
cp
284.156 34.8276 mo
284.156 35.1787 284.156 35.5947 284.74 35.5684 cv
284.74 36.4917 li
284.167 36.4658 283.765 36.4268 283.414 36.0366 cv
283.31 35.9326 283.115 35.6729 283.076 35.3604 cv
283.037 35.3345 li
282.958 35.3867 282.673 35.6855 282.609 35.7378 cv
281.828 36.4136 281.322 36.4785 280.71 36.4785 cv
279.748 36.4785 279.06 35.6855 279.06 34.8145 cv
279.06 33.9697 279.462 33.3325 280.06 32.8906 cv
280.8 32.3447 281.841 32.1494 282.958 32.1367 cv
282.958 31.2524 li
282.958 30.9795 282.958 30.3164 281.894 30.3164 cv
281.216 30.3164 280.515 30.6675 279.929 31.0313 cv
279.423 30.1602 li
280.269 29.7056 280.878 29.3804 281.972 29.3804 cv
282.453 29.3804 283.115 29.5103 283.531 29.8354 cv
284.013 30.2124 284.156 30.7192 284.156 31.3955 cv
284.156 34.8276 li
cp
f
70.71 45.0195 mo
70.71 52.1436 li
71.6978 52.1436 li
73.9731 52.1436 74.4932 50.3506 74.4932 48.5693 cv
74.4932 47.6982 74.3501 46.5791 73.7388 45.8389 cv
73.2188 45.2148 72.5298 45.0195 71.3467 45.0195 cv
70.71 45.0195 li
cp
69.3838 53.3525 mo
69.3838 43.8105 li
71.4507 43.8105 li
74.6099 43.8105 75.8838 45.6436 75.8838 48.7119 cv
75.8838 49.3232 75.793 50.5059 75.208 51.5332 cv
74.792 52.2744 73.9858 53.3525 71.4639 53.3525 cv
69.3838 53.3525 li
cp
false sop
0 0 0 .65 cmyk
f
81.1226 49.2842 mo
81.1226 48.1143 80.6807 47.2432 79.7578 47.2432 cv
79.1987 47.2432 78.7568 47.5811 78.5356 48.1006 cv
78.3276 48.5947 78.3145 49.0498 78.3018 49.2842 cv
81.1226 49.2842 li
cp
82.293 50.0771 mo
78.2627 50.0771 li
78.2495 51.5986 78.6914 52.6123 79.9004 52.6123 cv
80.6938 52.6123 81.0708 52.2354 81.2788 52.04 cv
81.9546 52.6641 li
81.5127 53.0537 80.9795 53.5225 79.7446 53.5225 cv
78.1714 53.5225 77.0664 52.2744 77.0664 50.1416 cv
77.0664 46.6836 79.1206 46.3975 79.7314 46.3975 cv
81.3696 46.3975 82.2407 47.7891 82.2798 49.4531 cv
82.293 50.0771 li
cp
f
86.2969 47.2822 mo
85.2959 47.2822 84.7368 48.6982 84.7368 49.8564 cv
84.7368 51.8838 85.6338 52.4424 86.3618 52.4424 cv
86.9341 52.4424 87.623 51.9365 87.623 49.791 cv
87.623 49.0752 87.519 47.2822 86.2969 47.2822 cv
cp
83.6318 46.6963 mo
84.6592 46.2412 li
84.6592 47.6982 li
84.6592 47.8018 84.7241 47.8545 84.75 47.8545 cv
84.7759 47.8545 84.8149 47.8408 84.8408 47.8154 cv
84.9707 47.7236 85.27 46.3193 86.5962 46.3193 cv
87.3369 46.3193 87.9351 46.7881 88.2471 47.373 cv
88.624 48.0752 88.8062 49.0635 88.8062 49.8428 cv
88.8062 52.2354 87.8052 53.4443 86.6089 53.4443 cv
86.167 53.4443 85.5171 53.1846 85.127 52.5732 cv
84.9448 52.2871 84.8931 52.248 84.8408 52.248 cv
84.7891 52.248 84.7759 52.3652 84.7759 52.4307 cv
84.7759 55.6279 li
83.6318 55.6279 li
83.6318 46.6963 li
cp
f
93.3691 49.8301 mo
91.939 49.8428 90.6519 50.3887 90.6519 51.585 cv
90.6519 52.1572 91.042 52.6514 91.666 52.6514 cv
92.4199 52.6514 93.0181 52.04 93.3691 51.6885 cv
93.3691 49.8301 li
cp
94.5649 51.832 mo
94.5649 52.1826 94.5649 52.5986 95.1499 52.5732 cv
95.1499 53.4961 li
94.5781 53.4697 94.1748 53.4307 93.8237 53.041 cv
93.7197 52.9365 93.5249 52.6768 93.4858 52.3652 cv
93.4468 52.3389 li
93.3691 52.3916 93.083 52.6904 93.0181 52.7422 cv
92.2378 53.418 91.731 53.4834 91.1196 53.4834 cv
90.1577 53.4834 89.4688 52.6904 89.4688 51.8193 cv
89.4688 50.9736 89.8716 50.3369 90.4697 49.8955 cv
91.2109 49.3486 92.251 49.1533 93.3691 49.1406 cv
93.3691 48.2568 li
93.3691 47.9834 93.3691 47.3213 92.3027 47.3213 cv
91.627 47.3213 90.9248 47.6719 90.3398 48.0361 cv
89.833 47.165 li
90.6777 46.71 91.2891 46.3848 92.3809 46.3848 cv
92.8618 46.3848 93.5249 46.5146 93.9409 46.8398 cv
94.4219 47.2168 94.5649 47.7236 94.5649 48.3994 cv
94.5649 51.832 li
cp
f
96.3716 46.8135 mo
97.4639 46.3721 li
97.4639 48.5303 li
97.4639 48.6084 97.4897 48.6865 97.5288 48.6865 cv
97.6719 48.6865 li
97.7495 48.5947 98.0098 48.1533 98.0747 48.0615 cv
98.9458 46.7617 99.7778 46.4238 99.96 46.3721 cv
99.96 48.2959 li
99.8169 48.2705 99.6738 48.2568 99.5308 48.2568 cv
98.7246 48.2568 98.0615 48.8027 97.5806 49.4658 cv
97.5806 53.3525 li
96.3716 53.3525 li
96.3716 46.8135 li
cp
f
100.753 47.0996 mo
101.728 47.0996 li
101.728 45.5527 li
102.82 44.499 li
102.95 44.499 li
102.95 47.0996 li
104.029 47.0996 li
104.029 47.8408 li
102.885 47.8408 li
102.885 51.8838 li
102.885 52.0146 102.885 52.4951 103.457 52.4951 cv
103.847 52.4951 104.276 52.2871 104.601 52.1182 cv
104.601 53.1455 li
104.25 53.3398 103.665 53.4834 103.275 53.4834 cv
102.963 53.4834 101.715 53.3789 101.715 52.0264 cv
101.715 47.8408 li
100.753 47.8408 li
100.753 47.0996 li
cp
f
105.719 46.7617 mo
106.746 46.3721 li
106.746 47.9707 li
106.824 48.0615 li
106.915 48.0361 106.928 48.0225 107.006 47.9316 cv
107.617 47.1777 107.682 47.0996 108.007 46.8398 cv
108.228 46.6709 108.579 46.4111 109.112 46.4111 cv
110.165 46.4111 110.308 47.2686 110.373 47.9053 cv
110.412 47.9316 li
110.425 47.9316 110.438 47.9189 110.451 47.9189 cv
110.529 47.8799 110.594 47.7627 110.659 47.6982 cv
111.608 46.6963 112.089 46.3975 112.765 46.3975 cv
112.934 46.3975 113.402 46.4238 113.714 46.8662 cv
113.896 47.126 113.961 47.3467 113.961 48.3994 cv
113.961 53.3525 li
112.843 53.3525 li
112.843 48.5166 li
112.843 47.958 112.843 47.3076 112.154 47.3076 cv
111.647 47.3076 111.166 47.8926 110.399 48.8545 cv
110.399 53.3525 li
109.281 53.3525 li
109.281 48.3086 li
109.281 47.373 108.956 47.3213 108.67 47.3213 cv
108.423 47.3213 108.202 47.4111 107.734 47.8545 cv
107.526 48.0488 107.448 48.1396 106.837 48.959 cv
106.837 53.3525 li
105.719 53.3525 li
105.719 46.7617 li
cp
f
119.265 49.2842 mo
119.265 48.1143 118.823 47.2432 117.9 47.2432 cv
117.341 47.2432 116.898 47.5811 116.678 48.1006 cv
116.47 48.5947 116.457 49.0498 116.444 49.2842 cv
119.265 49.2842 li
cp
120.435 50.0771 mo
116.405 50.0771 li
116.392 51.5986 116.833 52.6123 118.043 52.6123 cv
118.836 52.6123 119.213 52.2354 119.421 52.04 cv
120.097 52.6641 li
119.655 53.0537 119.122 53.5225 117.887 53.5225 cv
116.313 53.5225 115.208 52.2744 115.208 50.1416 cv
115.208 46.6836 117.263 46.3975 117.874 46.3975 cv
119.512 46.3975 120.383 47.7891 120.422 49.4531 cv
120.435 50.0771 li
cp
f
121.903 46.8135 mo
122.97 46.3848 li
122.97 47.7109 li
122.97 47.7627 123.009 47.8408 123.074 47.8408 cv
123.139 47.8408 123.229 47.7373 123.294 47.6592 cv
123.555 47.3076 li
123.958 46.7617 124.503 46.4365 125.192 46.4365 cv
125.505 46.4365 125.816 46.5146 126.077 46.6963 cv
126.35 46.8789 126.571 47.1777 126.571 48.166 cv
126.571 53.3525 li
125.427 53.3525 li
125.427 48.1924 li
125.427 48.0098 125.427 47.2949 124.75 47.2949 cv
124.14 47.2949 123.646 47.9443 123.581 48.0225 cv
123.178 48.5557 123.074 48.7373 123.074 48.751 cv
123.074 53.3525 li
121.903 53.3525 li
121.903 46.8135 li
cp
f
127.454 47.0996 mo
128.429 47.0996 li
128.429 45.5527 li
129.521 44.499 li
129.651 44.499 li
129.651 47.0996 li
130.73 47.0996 li
130.73 47.8408 li
129.586 47.8408 li
129.586 51.8838 li
129.586 52.0146 129.586 52.4951 130.158 52.4951 cv
130.548 52.4951 130.978 52.2871 131.303 52.1182 cv
131.303 53.1455 li
130.952 53.3398 130.366 53.4834 129.977 53.4834 cv
129.665 53.4834 128.417 53.3789 128.417 52.0264 cv
128.417 47.8408 li
127.454 47.8408 li
127.454 47.0996 li
cp
f
136.866 50.0381 mo
136.866 50.5576 137.048 52.4814 138.4 52.4814 cv
139.648 52.4814 139.869 50.8955 139.869 49.9209 cv
139.869 49.4658 139.791 48.751 139.635 48.3086 cv
139.479 47.8662 139.193 47.5811 138.881 47.4502 cv
138.725 47.3857 138.556 47.3604 138.387 47.3604 cv
137.1 47.3604 136.866 48.9854 136.866 50.0381 cv
cp
138.335 46.3848 mo
139.622 46.3848 140.246 47.0605 140.597 47.7236 cv
140.909 48.3213 141.104 49.3232 141.104 49.9854 cv
141.104 52.0264 140.064 53.4961 138.387 53.4961 cv
137.204 53.4961 136.71 52.8848 136.45 52.5596 cv
135.943 51.9229 135.722 51 135.722 49.8301 cv
135.722 47.4639 136.931 46.3848 138.335 46.3848 cv
cp
f
142.015 47.126 mo
142.963 47.126 li
142.963 45.6309 li
142.963 45.1631 142.963 44.6553 143.471 44.1484 cv
143.887 43.7324 144.458 43.667 144.81 43.667 cv
145.069 43.667 145.485 43.6943 145.811 43.8496 cv
145.811 44.8379 li
145.628 44.7471 145.382 44.6299 145.031 44.6299 cv
144.186 44.6299 144.186 45.3193 144.186 45.6699 cv
144.186 47.0996 li
145.382 47.0996 li
145.382 47.8799 li
144.186 47.8799 li
144.186 53.3525 li
142.963 53.3525 li
142.963 47.8799 li
142.015 47.8799 li
142.015 47.126 li
cp
f
153.259 43.8105 mo
154.624 43.8105 li
154.624 50.0898 li
154.624 51.9756 154.156 53.6396 151.933 53.6396 cv
151.335 53.6396 150.815 53.4834 150.295 53.002 cv
149.606 52.3525 149.502 51.6631 149.411 50.9736 cv
150.763 50.4541 li
150.737 51.6104 151.01 52.4307 152.05 52.4307 cv
153.233 52.4307 153.259 50.9609 153.259 50.5059 cv
153.259 43.8105 li
cp
f
157.354 50.0381 mo
157.354 50.5576 157.536 52.4814 158.888 52.4814 cv
160.136 52.4814 160.357 50.8955 160.357 49.9209 cv
160.357 49.4658 160.279 48.751 160.123 48.3086 cv
159.966 47.8662 159.681 47.5811 159.369 47.4502 cv
159.212 47.3857 159.044 47.3604 158.875 47.3604 cv
157.588 47.3604 157.354 48.9854 157.354 50.0381 cv
cp
158.824 46.3848 mo
160.11 46.3848 160.734 47.0605 161.085 47.7236 cv
161.397 48.3213 161.592 49.3232 161.592 49.9854 cv
161.592 52.0264 160.552 53.4961 158.875 53.4961 cv
157.692 53.4961 157.198 52.8848 156.938 52.5596 cv
156.431 51.9229 156.21 51 156.21 49.8301 cv
156.21 47.4639 157.419 46.3848 158.824 46.3848 cv
cp
f
166.74 49.999 mo
166.74 49.1406 166.636 47.334 165.402 47.334 cv
164.947 47.334 163.854 47.8154 163.854 50.0117 cv
163.854 51.3115 164.465 52.5469 165.453 52.5469 cv
166.74 52.5469 166.74 50.4404 166.74 49.999 cv
cp
162.736 44.083 mo
163.88 43.6416 li
163.88 47.4893 li
163.88 47.5283 163.906 47.5674 163.932 47.5938 cv
164.062 47.5811 li
164.257 47.2686 164.335 47.1387 164.426 47.0342 cv
164.634 46.7881 164.986 46.3975 165.713 46.3975 cv
166.988 46.3975 167.91 47.6455 167.91 49.999 cv
167.91 50.9736 167.611 53.5088 165.701 53.5088 cv
164.673 53.5088 164.205 52.5596 164.023 52.1699 cv
163.958 52.0264 163.932 51.9873 163.867 51.9873 cv
163.841 51.9873 163.789 52.0527 163.789 52.0791 cv
163.763 53.5869 li
162.736 53.1455 li
162.736 44.083 li
cp
f
172.252 47.9053 mo
171.746 47.542 171.394 47.2822 170.718 47.2822 cv
170.003 47.2822 169.705 47.7373 169.705 48.1787 cv
169.705 48.6865 170.107 48.9463 170.523 49.1533 cv
171.615 49.7002 li
171.992 49.8818 172.876 50.3232 172.876 51.4814 cv
172.876 52.6904 171.941 53.5352 170.64 53.5352 cv
169.652 53.5352 169.041 53.1455 168.638 52.8848 cv
169.093 52.001 li
169.744 52.5205 170.133 52.6904 170.679 52.6904 cv
171.42 52.6904 171.836 52.1826 171.836 51.624 cv
171.836 51.0654 171.564 50.8955 170.458 50.3506 cv
169.21 49.7393 168.742 49.2188 168.742 48.3213 cv
168.742 47.1387 169.691 46.4502 170.771 46.4502 cv
171.251 46.4502 171.771 46.4756 172.59 46.9834 cv
172.252 47.9053 li
cp
f
175.75 51.6367 mo
175.606 52.0527 li
174.228 55.7197 li
173.136 55.7197 li
174.696 51.6367 li
175.75 51.6367 li
cp
f
181.052 43.8105 mo
186.981 43.8105 li
186.981 44.9805 li
182.417 44.9805 li
182.417 47.75 li
185.785 47.75 li
185.785 48.959 li
182.444 48.959 li
182.444 52.1436 li
187.228 52.1436 li
187.228 53.3525 li
181.052 53.3525 li
181.052 43.8105 li
cp
f
188.905 46.8135 mo
189.971 46.3848 li
189.971 47.7109 li
189.971 47.7627 190.009 47.8408 190.076 47.8408 cv
190.14 47.8408 190.231 47.7373 190.296 47.6592 cv
190.556 47.3076 li
190.958 46.7617 191.505 46.4365 192.195 46.4365 cv
192.505 46.4365 192.818 46.5146 193.078 46.6963 cv
193.351 46.8789 193.572 47.1777 193.572 48.166 cv
193.572 53.3525 li
192.428 53.3525 li
192.428 48.1924 li
192.428 48.0098 192.428 47.2949 191.751 47.2949 cv
191.141 47.2949 190.647 47.9443 190.582 48.0225 cv
190.179 48.5557 190.076 48.7373 190.076 48.751 cv
190.076 53.3525 li
188.905 53.3525 li
188.905 46.8135 li
cp
f
194.443 47.0996 mo
195.417 47.0996 li
195.417 45.5527 li
196.509 44.499 li
196.64 44.499 li
196.64 47.0996 li
197.718 47.0996 li
197.718 47.8408 li
196.575 47.8408 li
196.575 51.8838 li
196.575 52.0146 196.575 52.4951 197.146 52.4951 cv
197.537 52.4951 197.966 52.2871 198.291 52.1182 cv
198.291 53.1455 li
197.94 53.3398 197.355 53.4834 196.964 53.4834 cv
196.653 53.4834 195.405 53.3789 195.405 52.0264 cv
195.405 47.8408 li
194.443 47.8408 li
194.443 47.0996 li
cp
f
203.036 49.2842 mo
203.036 48.1143 202.593 47.2432 201.671 47.2432 cv
201.112 47.2432 200.669 47.5811 200.449 48.1006 cv
200.241 48.5947 200.228 49.0498 200.214 49.2842 cv
203.036 49.2842 li
cp
204.207 50.0771 mo
200.175 50.0771 li
200.163 51.5986 200.605 52.6123 201.814 52.6123 cv
202.607 52.6123 202.984 52.2354 203.192 52.04 cv
203.868 52.6641 li
203.425 53.0537 202.892 53.5225 201.658 53.5225 cv
200.084 53.5225 198.98 52.2744 198.98 50.1416 cv
198.98 46.6836 201.034 46.3975 201.644 46.3975 cv
203.283 46.3975 204.154 47.7891 204.193 49.4531 cv
204.207 50.0771 li
cp
f
205.636 46.8135 mo
206.728 46.3721 li
206.728 48.5303 li
206.728 48.6084 206.753 48.6865 206.792 48.6865 cv
206.936 48.6865 li
207.013 48.5947 207.274 48.1533 207.339 48.0615 cv
208.21 46.7617 209.042 46.4238 209.224 46.3721 cv
209.224 48.2959 li
209.082 48.2705 208.938 48.2568 208.794 48.2568 cv
207.989 48.2568 207.326 48.8027 206.845 49.4658 cv
206.845 53.3525 li
205.636 53.3525 li
205.636 46.8135 li
cp
f
213.072 47.2822 mo
212.071 47.2822 211.511 48.6982 211.511 49.8564 cv
211.511 51.8838 212.409 52.4424 213.136 52.4424 cv
213.708 52.4424 214.398 51.9365 214.398 49.791 cv
214.398 49.0752 214.294 47.2822 213.072 47.2822 cv
cp
210.407 46.6963 mo
211.433 46.2412 li
211.433 47.6982 li
211.433 47.8018 211.5 47.8545 211.525 47.8545 cv
211.55 47.8545 211.589 47.8408 211.616 47.8154 cv
211.746 47.7236 212.044 46.3193 213.371 46.3193 cv
214.112 46.3193 214.71 46.7881 215.022 47.373 cv
215.399 48.0752 215.582 49.0635 215.582 49.8428 cv
215.582 52.2354 214.58 53.4443 213.384 53.4443 cv
212.942 53.4443 212.292 53.1846 211.902 52.5732 cv
211.72 52.2871 211.667 52.248 211.616 52.248 cv
211.564 52.248 211.55 52.3652 211.55 52.4307 cv
211.55 55.6279 li
210.407 55.6279 li
210.407 46.6963 li
cp
f
216.816 46.8135 mo
217.908 46.3721 li
217.908 48.5303 li
217.908 48.6084 217.933 48.6865 217.972 48.6865 cv
218.116 48.6865 li
218.193 48.5947 218.454 48.1533 218.519 48.0615 cv
219.39 46.7617 220.222 46.4238 220.404 46.3721 cv
220.404 48.2959 li
220.261 48.2705 220.118 48.2568 219.974 48.2568 cv
219.168 48.2568 218.505 48.8027 218.025 49.4658 cv
218.025 53.3525 li
216.816 53.3525 li
216.816 46.8135 li
cp
f
222.029 46.5537 mo
223.199 46.5537 li
223.199 53.3525 li
222.029 53.3525 li
222.029 46.5537 li
cp
221.847 44.0576 mo
223.355 44.0576 li
223.355 45.293 li
221.847 45.293 li
221.847 44.0576 li
cp
f
228.204 47.9053 mo
227.697 47.542 227.345 47.2822 226.669 47.2822 cv
225.955 47.2822 225.656 47.7373 225.656 48.1787 cv
225.656 48.6865 226.058 48.9463 226.474 49.1533 cv
227.566 49.7002 li
227.943 49.8818 228.828 50.3232 228.828 51.4814 cv
228.828 52.6904 227.892 53.5352 226.591 53.5352 cv
225.603 53.5352 224.992 53.1455 224.589 52.8848 cv
225.044 52.001 li
225.695 52.5205 226.084 52.6904 226.63 52.6904 cv
227.372 52.6904 227.788 52.1826 227.788 51.624 cv
227.788 51.0654 227.515 50.8955 226.41 50.3506 cv
225.162 49.7393 224.693 49.2188 224.693 48.3213 cv
224.693 47.1387 225.642 46.4502 226.722 46.4502 cv
227.203 46.4502 227.722 46.4756 228.542 46.9834 cv
228.204 47.9053 li
cp
f
233.689 49.2842 mo
233.689 48.1143 233.248 47.2432 232.325 47.2432 cv
231.765 47.2432 231.324 47.5811 231.103 48.1006 cv
230.894 48.5947 230.881 49.0498 230.869 49.2842 cv
233.689 49.2842 li
cp
234.859 50.0771 mo
230.83 50.0771 li
230.816 51.5986 231.258 52.6123 232.468 52.6123 cv
233.261 52.6123 233.638 52.2354 233.845 52.04 cv
234.521 52.6641 li
234.08 53.0537 233.546 53.5225 232.312 53.5225 cv
230.738 53.5225 229.633 52.2744 229.633 50.1416 cv
229.633 46.6836 231.687 46.3975 232.298 46.3975 cv
233.937 46.3975 234.808 47.7891 234.847 49.4531 cv
234.859 50.0771 li
cp
f
243.335 49.8301 mo
241.906 49.8428 240.619 50.3887 240.619 51.585 cv
240.619 52.1572 241.009 52.6514 241.632 52.6514 cv
242.386 52.6514 242.985 52.04 243.335 51.6885 cv
243.335 49.8301 li
cp
244.532 51.832 mo
244.532 52.1826 244.532 52.5986 245.117 52.5732 cv
245.117 53.4961 li
244.544 53.4697 244.142 53.4307 243.791 53.041 cv
243.687 52.9365 243.492 52.6768 243.453 52.3652 cv
243.414 52.3389 li
243.335 52.3916 243.05 52.6904 242.985 52.7422 cv
242.205 53.418 241.698 53.4834 241.086 53.4834 cv
240.125 53.4834 239.435 52.6904 239.435 51.8193 cv
239.435 50.9736 239.838 50.3369 240.437 49.8955 cv
241.177 49.3486 242.218 49.1533 243.335 49.1406 cv
243.335 48.2568 li
243.335 47.9834 243.335 47.3213 242.269 47.3213 cv
241.593 47.3213 240.892 47.6719 240.306 48.0361 cv
239.8 47.165 li
240.644 46.71 241.255 46.3848 242.347 46.3848 cv
242.829 46.3848 243.492 46.5146 243.908 46.8398 cv
244.388 47.2168 244.532 47.7236 244.532 48.3994 cv
244.532 51.832 li
cp
f
246.351 46.8135 mo
247.417 46.3848 li
247.417 47.7109 li
247.417 47.7627 247.457 47.8408 247.521 47.8408 cv
247.586 47.8408 247.677 47.7373 247.742 47.6592 cv
248.002 47.3076 li
248.406 46.7617 248.951 46.4365 249.64 46.4365 cv
249.953 46.4365 250.265 46.5146 250.525 46.6963 cv
250.797 46.8789 251.019 47.1777 251.019 48.166 cv
251.019 53.3525 li
249.875 53.3525 li
249.875 48.1924 li
249.875 48.0098 249.875 47.2949 249.199 47.2949 cv
248.587 47.2949 248.093 47.9443 248.029 48.0225 cv
247.625 48.5557 247.521 48.7373 247.521 48.751 cv
247.521 53.3525 li
246.351 53.3525 li
246.351 46.8135 li
cp
f
254.71 52.5078 mo
255.763 52.5078 256.284 51.0654 256.284 49.9209 cv
256.284 48.4258 255.607 47.3076 254.724 47.3076 cv
253.722 47.3076 253.384 48.4775 253.384 50.0771 cv
253.384 50.6748 253.462 52.5078 254.71 52.5078 cv
cp
257.388 43.6289 mo
257.388 53.1064 li
256.388 53.5352 li
256.335 52.04 li
256.335 51.9873 256.296 51.9492 256.257 51.9492 cv
256.193 51.9492 256.167 52.04 256.101 52.1699 cv
256.062 52.2607 255.529 53.0928 255.14 53.3008 cv
254.97 53.3916 254.697 53.4834 254.424 53.4834 cv
252.995 53.4834 252.214 51.9873 252.214 49.8037 cv
252.214 48.3604 252.787 46.3721 254.398 46.3721 cv
255.191 46.3721 255.491 46.749 255.88 47.2295 cv
255.919 47.2822 255.958 47.3467 255.998 47.3994 cv
256.023 47.4385 256.088 47.5938 256.154 47.5938 cv
256.206 47.5938 256.245 47.5283 256.245 47.4502 cv
256.245 44.0576 li
257.388 43.6289 li
cp
f
262.796 52.5078 mo
263.602 52.5078 li
263.602 44.6816 li
262.796 44.6816 li
262.796 43.8105 li
265.799 43.8105 li
265.799 44.6816 li
264.955 44.6816 li
264.955 52.5078 li
265.799 52.5078 li
265.799 53.3525 li
262.796 53.3525 li
262.796 52.5078 li
cp
f
267.567 46.8135 mo
268.633 46.3848 li
268.633 47.7109 li
268.633 47.7627 268.671 47.8408 268.738 47.8408 cv
268.802 47.8408 268.893 47.7373 268.958 47.6592 cv
269.218 47.3076 li
269.621 46.7617 270.167 46.4365 270.857 46.4365 cv
271.167 46.4365 271.48 46.5146 271.74 46.6963 cv
272.013 46.8789 272.234 47.1777 272.234 48.166 cv
272.234 53.3525 li
271.089 53.3525 li
271.089 48.1924 li
271.089 48.0098 271.089 47.2949 270.414 47.2949 cv
269.802 47.2949 269.309 47.9443 269.244 48.0225 cv
268.841 48.5557 268.738 48.7373 268.738 48.751 cv
268.738 53.3525 li
267.567 53.3525 li
267.567 46.8135 li
cp
f
273.873 46.8135 mo
274.939 46.3848 li
274.939 47.7109 li
274.939 47.7627 274.978 47.8408 275.042 47.8408 cv
275.107 47.8408 275.199 47.7373 275.263 47.6592 cv
275.523 47.3076 li
275.927 46.7617 276.472 46.4365 277.162 46.4365 cv
277.474 46.4365 277.785 46.5146 278.046 46.6963 cv
278.318 46.8789 278.539 47.1777 278.539 48.166 cv
278.539 53.3525 li
277.396 53.3525 li
277.396 48.1924 li
277.396 48.0098 277.396 47.2949 276.72 47.2949 cv
276.109 47.2949 275.615 47.9443 275.55 48.0225 cv
275.146 48.5557 275.042 48.7373 275.042 48.751 cv
275.042 53.3525 li
273.873 53.3525 li
273.873 46.8135 li
cp
f
280.957 50.0381 mo
280.957 50.5576 281.138 52.4814 282.492 52.4814 cv
283.74 52.4814 283.96 50.8955 283.96 49.9209 cv
283.96 49.4658 283.882 48.751 283.726 48.3086 cv
283.57 47.8662 283.285 47.5811 282.972 47.4502 cv
282.816 47.3857 282.648 47.3604 282.478 47.3604 cv
281.191 47.3604 280.957 48.9854 280.957 50.0381 cv
cp
282.425 46.3848 mo
283.712 46.3848 284.337 47.0605 284.689 47.7236 cv
285 48.3213 285.195 49.3232 285.195 49.9854 cv
285.195 52.0264 284.156 53.4961 282.478 53.4961 cv
281.294 53.4961 280.8 52.8848 280.541 52.5596 cv
280.035 51.9229 279.812 51 279.812 49.8301 cv
279.812 47.4639 281.023 46.3848 282.425 46.3848 cv
cp
f
290.578 46.5537 mo
288.824 53.3525 li
287.419 53.3525 li
285.56 46.5537 li
286.781 46.5537 li
287.808 50.9736 li
287.835 51.0781 287.875 51.3252 287.914 51.5068 cv
287.939 51.6367 287.953 51.8447 287.992 51.9492 cv
288.003 51.9756 288.029 52.04 288.082 52.04 cv
288.173 52.04 li
288.224 52.04 288.251 51.9756 288.263 51.9365 cv
288.316 51.8057 288.33 51.5596 288.355 51.416 cv
288.38 51.2598 288.419 51.1045 288.445 50.9609 cv
289.447 46.5537 li
290.578 46.5537 li
cp
f
295.23 49.8301 mo
293.8 49.8428 292.513 50.3887 292.513 51.585 cv
292.513 52.1572 292.904 52.6514 293.527 52.6514 cv
294.281 52.6514 294.88 52.04 295.23 51.6885 cv
295.23 49.8301 li
cp
296.427 51.832 mo
296.427 52.1826 296.427 52.5986 297.011 52.5732 cv
297.011 53.4961 li
296.439 53.4697 296.037 53.4307 295.685 53.041 cv
295.582 52.9365 295.386 52.6768 295.347 52.3652 cv
295.308 52.3389 li
295.23 52.3916 294.945 52.6904 294.88 52.7422 cv
294.099 53.418 293.593 53.4834 292.982 53.4834 cv
292.019 53.4834 291.332 52.6904 291.332 51.8193 cv
291.332 50.9736 291.734 50.3369 292.332 49.8955 cv
293.072 49.3486 294.113 49.1533 295.23 49.1406 cv
295.23 48.2568 li
295.23 47.9834 295.23 47.3213 294.166 47.3213 cv
293.488 47.3213 292.787 47.6719 292.201 48.0361 cv
291.695 47.165 li
292.541 46.71 293.15 46.3848 294.244 46.3848 cv
294.724 46.3848 295.386 46.5146 295.802 46.8398 cv
296.285 47.2168 296.427 47.7236 296.427 48.3994 cv
296.427 51.832 li
cp
f
297.48 47.0996 mo
298.455 47.0996 li
298.455 45.5527 li
299.546 44.499 li
299.677 44.499 li
299.677 47.0996 li
300.757 47.0996 li
300.757 47.8408 li
299.613 47.8408 li
299.613 51.8838 li
299.613 52.0146 299.613 52.4951 300.185 52.4951 cv
300.574 52.4951 301.003 52.2871 301.328 52.1182 cv
301.328 53.1455 li
300.978 53.3398 300.392 53.4834 300.001 53.4834 cv
299.691 53.4834 298.443 53.3789 298.443 52.0264 cv
298.443 47.8408 li
297.48 47.8408 li
297.48 47.0996 li
cp
f
302.693 46.5537 mo
303.863 46.5537 li
303.863 53.3525 li
302.693 53.3525 li
302.693 46.5537 li
cp
302.511 44.0576 mo
304.019 44.0576 li
304.019 45.293 li
302.511 45.293 li
302.511 44.0576 li
cp
f
306.593 50.0381 mo
306.593 50.5576 306.775 52.4814 308.126 52.4814 cv
309.375 52.4814 309.595 50.8955 309.595 49.9209 cv
309.595 49.4658 309.517 48.751 309.363 48.3086 cv
309.207 47.8662 308.919 47.5811 308.607 47.4502 cv
308.453 47.3857 308.283 47.3604 308.115 47.3604 cv
306.828 47.3604 306.593 48.9854 306.593 50.0381 cv
cp
308.062 46.3848 mo
309.349 46.3848 309.972 47.0605 310.324 47.7236 cv
310.636 48.3213 310.832 49.3232 310.832 49.9854 cv
310.832 52.0264 309.791 53.4961 308.115 53.4961 cv
306.931 53.4961 306.437 52.8848 306.177 52.5596 cv
305.669 51.9229 305.449 51 305.449 49.8301 cv
305.449 47.4639 306.658 46.3848 308.062 46.3848 cv
cp
f
312.13 46.8135 mo
313.197 46.3848 li
313.197 47.7109 li
313.197 47.7627 313.236 47.8408 313.3 47.8408 cv
313.367 47.8408 313.457 47.7373 313.523 47.6592 cv
313.783 47.3076 li
314.185 46.7617 314.732 46.4365 315.419 46.4365 cv
315.732 46.4365 316.044 46.5146 316.304 46.6963 cv
316.578 46.8789 316.798 47.1777 316.798 48.166 cv
316.798 53.3525 li
315.654 53.3525 li
315.654 48.1924 li
315.654 48.0098 315.654 47.2949 314.978 47.2949 cv
314.367 47.2949 313.873 47.9443 313.808 48.0225 cv
313.406 48.5557 313.3 48.7373 313.3 48.751 cv
313.3 53.3525 li
312.13 53.3525 li
312.13 46.8135 li
cp
f
.311 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
22.335 1.71875 mo
21.1289 .94043 li
13.0347 6.93262 li
14.981 7.82764 li
0 0 0 1 cmyk
@
gsave
0 80.7881 mo
74.5786 80.7881 li
74.5786 0 li
0 0 li
0 80.7881 li
cp
clp
.249 lw
18.1323 10.084 mo
18.1323 10.084 23.2295 15.7261 29.3774 16.6211 cv
35.5254 17.5161 38.4434 14.9092 38.4434 14.9092 cv
38.4434 14.9092 43.3857 12.2241 43.8135 15.8433 cv
@
grestore
gsave
1.63477 75.2393 mo
48.8809 75.2393 li
48.8809 .785156 li
1.63477 .785156 li
1.63477 75.2393 li
cp
clp
.272 lw
26.0981 68.0234 mo
26.9292 68.1279 27.6182 68.4482 27.7212 67.6162 cv
27.8252 66.7842 27.2354 66.0264 26.4043 65.9238 cv
25.5732 65.8213 24.8574 66.417 24.7124 67.2412 cv
24.5962 67.8945 25.2671 67.9209 26.0981 68.0234 cv
cp
24.7422 67.0732 mo
24.8213 66.4404 24.373 65.8643 23.7412 65.7861 cv
23.1094 65.7061 22.5332 66.1553 22.4551 66.7881 cv
22.376 67.4189 24.6641 67.7041 24.7422 67.0732 cv
cp
27.6914 67.7861 mo
27.6123 68.417 29.9004 68.7021 29.979 68.0713 cv
30.0571 67.4385 29.6094 66.8623 28.9771 66.7842 cv
28.3452 66.7061 27.77 67.1533 27.6914 67.7861 cv
cp
@
.486 lw
47.2896 17.1655 mo
48.5063 12.9546 45.2192 11.4272 45.2192 11.4272 cv
42.8164 9.81836 39.7866 10.8643 39.7866 10.8643 cv
30.7266 16.5366 22.7363 2.24756 22.7363 2.24756 cv
22.3735 1.83545 li
14.8794 7.81543 li
14.8794 7.81543 24.0195 22.3086 37.9443 16.3862 cv
37.9443 16.3862 42.6646 13.0034 42.8403 16.0376 cv
@
.272 lw
22.4512 6.55469 mo
22.7954 6.61572 23.1245 6.38574 23.1865 6.04053 cv
23.2471 5.6958 23.0161 5.3667 22.6714 5.30664 cv
22.3262 5.24561 21.9971 5.47559 21.9375 5.8208 cv
21.8765 6.16553 22.1064 6.49365 22.4512 6.55469 cv
cp
19.2222 8.95557 mo
19.5664 9.0166 19.8955 8.78662 19.9565 8.44141 cv
20.0171 8.09668 19.7871 7.76855 19.4424 7.70752 cv
19.0972 7.64648 18.7681 7.87646 18.7085 8.22168 cv
18.6475 8.56641 18.8774 8.89453 19.2222 8.95557 cv
cp
24.9424 9.56543 mo
25.2861 9.62646 25.6152 9.39551 25.6763 9.05176 cv
25.7373 8.70654 25.5063 8.37744 25.1621 8.31641 cv
24.8174 8.25586 24.4883 8.48633 24.4272 8.83154 cv
24.3662 9.17578 24.5972 9.50439 24.9424 9.56543 cv
cp
22.8794 12.3667 mo
23.2241 12.4277 23.5532 12.1978 23.6143 11.8525 cv
23.6753 11.5088 23.4443 11.1797 23.0991 11.1187 cv
22.7554 11.0576 22.4263 11.2876 22.3652 11.6328 cv
22.3042 11.9775 22.5352 12.3057 22.8794 12.3667 cv
cp
27.9512 12.0557 mo
28.2954 12.1167 28.6245 11.8867 28.6865 11.5415 cv
28.7461 11.1968 28.5151 10.8677 28.1714 10.8076 cv
27.8262 10.7466 27.4985 10.9766 27.4365 11.3218 cv
27.3765 11.6665 27.6064 11.9946 27.9512 12.0557 cv
cp
26.4341 14.4297 mo
26.7783 14.4897 27.1074 14.2598 27.1685 13.9155 cv
27.2285 13.5708 26.9985 13.2417 26.6533 13.1807 cv
26.3081 13.1196 25.9805 13.3506 25.9194 13.6943 cv
25.8584 14.0396 26.0884 14.3687 26.4341 14.4297 cv
cp
31.3755 13.8193 mo
31.7192 13.8809 32.0483 13.6504 32.1104 13.3057 cv
32.1704 12.9604 31.9395 12.6318 31.5952 12.5718 cv
31.2505 12.5107 30.9224 12.7407 30.8604 13.0854 cv
30.8003 13.4307 31.0303 13.7588 31.3755 13.8193 cv
cp
30.4282 15.6484 mo
30.7734 15.7095 31.1025 15.4795 31.1621 15.1348 cv
31.2231 14.7896 30.9932 14.4604 30.6484 14.3994 cv
30.3032 14.3398 29.9741 14.5693 29.9141 14.9136 cv
29.8535 15.2588 30.0835 15.5874 30.4282 15.6484 cv
cp
34.9033 14.4424 mo
35.2471 14.5024 35.5762 14.2725 35.6372 13.9277 cv
35.6982 13.5835 35.4683 13.2544 35.1235 13.1934 cv
34.7783 13.1328 34.4492 13.3628 34.3882 13.7075 cv
34.3281 14.0527 34.5581 14.3818 34.9033 14.4424 cv
cp
38.6382 13.8193 mo
38.9834 13.8809 39.3125 13.6504 39.3735 13.3057 cv
39.4331 12.9604 39.2031 12.6318 38.8584 12.5718 cv
38.5142 12.5107 38.1855 12.7407 38.1245 13.0854 cv
38.0635 13.4307 38.2935 13.7588 38.6382 13.8193 cv
cp
42.2705 12.8857 mo
42.6143 12.9468 42.9434 12.7168 43.0054 12.3716 cv
43.0654 12.0264 42.8345 11.6978 42.4902 11.6377 cv
42.1455 11.5767 41.8174 11.8066 41.7554 12.1514 cv
41.6953 12.4966 41.9253 12.8247 42.2705 12.8857 cv
cp
45.3833 14.8574 mo
45.7275 14.9175 46.0562 14.6875 46.1182 14.3438 cv
46.1782 13.9985 45.9473 13.6694 45.6035 13.6084 cv
45.2583 13.5479 44.9302 13.7788 44.8682 14.1226 cv
44.8081 14.4678 45.0381 14.7964 45.3833 14.8574 cv
cp
42.9385 25.4517 mo
44.8501 26.1714 46.9824 25.2056 47.7021 23.2944 cv
48.4224 21.3828 47.4565 19.2495 45.5444 18.5308 cv
43.6333 17.8105 41.5015 18.7764 40.7813 20.6875 cv
40.0615 22.5996 41.0273 24.7314 42.9385 25.4517 cv
cp
43.7324 23.3428 mo
44.4795 23.6235 45.3125 23.2466 45.5942 22.4995 cv
45.8745 21.7534 45.4971 20.9204 44.7505 20.6387 cv
44.0044 20.3574 43.1714 20.7354 42.8892 21.4814 cv
42.6084 22.2285 42.9863 23.0615 43.7324 23.3428 cv
cp
44.9004 20.7056 mo
45.4673 20.9185 46.1011 20.6328 46.3154 20.0645 cv
46.5283 19.4976 46.2422 18.8647 45.6743 18.6504 cv
45.1074 18.4365 44.4741 18.7236 44.2603 19.2915 cv
44.0464 19.8584 44.3335 20.4917 44.9004 20.7056 cv
cp
42.9565 21.3325 mo
43.1694 20.7646 42.8833 20.1318 42.3154 19.9175 cv
41.7485 19.7046 41.1143 19.9907 40.9014 20.5586 cv
40.6875 21.1255 40.9741 21.7598 41.5415 21.9727 cv
42.1094 22.1865 42.7422 21.8994 42.9565 21.3325 cv
cp
43.5825 23.2764 mo
43.0161 23.0625 42.3823 23.3496 42.1685 23.9165 cv
41.9551 24.4844 42.2422 25.1177 42.8091 25.3315 cv
43.3765 25.5444 44.0093 25.2588 44.2231 24.6904 cv
44.4375 24.1235 44.1504 23.4907 43.5825 23.2764 cv
cp
45.5273 22.6494 mo
45.3135 23.2178 45.6001 23.8506 46.1675 24.0635 cv
46.7354 24.2773 47.3682 23.9907 47.5825 23.4238 cv
47.7964 22.8555 47.5093 22.2227 46.9414 22.0098 cv
46.3745 21.7954 45.7412 22.0825 45.5273 22.6494 cv
cp
26.7432 66.0156 mo
27.4971 66.1094 28.1855 65.5732 28.2783 64.8193 cv
28.3721 64.0664 27.8374 63.3779 27.0835 63.2861 cv
26.3291 63.1904 25.6421 63.7266 25.5483 64.4805 cv
25.4541 65.2334 25.9893 65.9209 26.7432 66.0156 cv
cp
33.3721 49.0625 mo
34.0132 49.1426 34.5972 48.6875 34.6772 48.0479 cv
34.7563 47.4072 34.3022 46.8213 33.6611 46.7412 cv
33.0205 46.6611 32.4365 47.1162 32.3564 47.7578 cv
32.2764 48.3984 32.7314 48.9824 33.3721 49.0625 cv
cp
30.8813 55.8857 mo
31.6343 55.9795 32.3223 55.4443 32.4165 54.6904 cv
32.5103 53.9355 31.9751 53.249 31.2212 53.1553 cv
30.4663 53.0615 29.7793 53.5967 29.6855 54.3506 cv
29.5923 55.1035 30.1265 55.792 30.8813 55.8857 cv
cp
34.4565 46.915 mo
36.4883 47.6777 38.7534 46.6484 39.5161 44.6162 cv
40.2783 42.585 39.2495 40.3193 37.2173 39.5576 cv
35.1855 38.7944 32.9204 39.8237 32.1582 41.8555 cv
31.3955 43.8877 32.4243 46.1523 34.4565 46.915 cv
cp
35.2974 44.6738 mo
36.0913 44.9717 36.9761 44.5693 37.2744 43.7754 cv
37.5713 42.9814 37.1694 42.0977 36.3765 41.7998 cv
35.5825 41.501 34.6973 41.9033 34.3994 42.6963 cv
34.1011 43.4912 34.5044 44.376 35.2974 44.6738 cv
cp
36.5352 41.8701 mo
37.1382 42.0957 37.8115 41.79 38.0381 41.1865 cv
38.2632 40.5835 37.9585 39.9116 37.3555 39.6846 cv
36.7524 39.4585 36.0791 39.7637 35.8525 40.3677 cv
35.6265 40.9707 35.9321 41.6426 36.5352 41.8701 cv
cp
34.4702 42.5381 mo
34.6963 41.9346 34.3911 41.2627 33.7881 41.0361 cv
33.1841 40.8096 32.5122 41.1143 32.2861 41.7188 cv
32.0591 42.3213 32.3643 42.9932 32.9683 43.2207 cv
33.5713 43.4463 34.2432 43.1406 34.4702 42.5381 cv
cp
35.1382 44.6025 mo
34.5361 44.376 33.8633 44.6816 33.6362 45.2861 cv
33.4102 45.8887 33.7153 46.5605 34.3184 46.7881 cv
34.9224 47.0137 35.5942 46.708 35.8203 46.1045 cv
36.0474 45.501 35.7422 44.8291 35.1382 44.6025 cv
cp
37.2031 43.9346 mo
36.9775 44.5381 37.2832 45.21 37.8862 45.4365 cv
38.4893 45.6631 39.1621 45.3574 39.3882 44.7549 cv
39.6152 44.1514 39.3091 43.4785 38.7065 43.2529 cv
38.1035 43.0254 37.4302 43.3311 37.2031 43.9346 cv
cp
@
.486 lw
15.4434 9.10059 mo
15.4434 9.10059 1.1582 19.3047 1.99658 40.5503 cv
1.99658 40.5503 1.20654 54.21 9.37744 64.4814 cv
9.37744 64.4814 13.6572 69.3066 11.6343 71.7197 cv
11.6343 71.7197 10.0786 70.3965 9.06641 72.2646 cv
8.61328 73.0986 8.98828 76.0771 12.8013 73.8984 cv
20.7183 14.1396 mo
20.7183 14.1396 8.71045 23.0854 9.49219 40.6084 cv
9.49219 40.6084 9.70752 57.3193 21.9072 66.1084 cv
@
grestore
gsave
0 80.7881 mo
74.5786 80.7881 li
74.5786 0 li
0 0 li
0 80.7881 li
cp
clp
12.2881 64.1943 mo
13.6948 64.4424 15.0361 63.5029 15.2842 62.0967 cv
15.5322 60.6895 14.5928 59.3486 13.186 59.0986 cv
11.7788 58.8516 10.438 59.792 10.1899 61.1982 cv
9.94189 62.6045 10.8809 63.9463 12.2881 64.1943 cv
cp
@
.272 lw
12.4409 63.3262 mo
13.3687 63.4902 14.2539 62.8721 14.417 61.9434 cv
14.5806 61.0156 13.9609 60.1299 13.0337 59.9658 cv
12.106 59.8037 11.2207 60.4229 11.0566 61.3516 cv
10.894 62.2783 11.5127 63.1631 12.4409 63.3262 cv
cp
@
.311 lw
14.6753 17.0439 mo
16.082 17.292 17.4233 16.3525 17.6714 14.9458 cv
17.9194 13.5391 16.98 12.1978 15.5732 11.9497 cv
14.166 11.7017 12.8252 12.6406 12.5771 14.0479 cv
12.3291 15.4536 13.2681 16.7959 14.6753 17.0439 cv
cp
@
.272 lw
14.8276 16.1768 mo
15.7559 16.3408 16.6406 15.7207 16.8037 14.793 cv
16.9678 13.8647 16.3477 12.981 15.4199 12.8169 cv
14.4927 12.6538 13.6079 13.2729 13.4448 14.2007 cv
13.2808 15.1289 13.8999 16.0127 14.8276 16.1768 cv
cp
@
.311 lw
12.9658 19.5684 mo
12.1987 16.7466 li
12.1987 16.7466 13.7798 18.6797 16.3037 18.2554 cv
12.9658 19.5684 li
cp
@
grestore
gsave
1.63477 75.2393 mo
48.8809 75.2393 li
48.8809 .785156 li
1.63477 .785156 li
1.63477 75.2393 li
cp
clp
.389 lw
6.98096 53.0088 mo
4.00586 44.6318 5.08789 36.9072 5.08789 36.9072 cv
6.16797 24.0596 11.3481 18.5464 11.3481 18.5464 cv
@
.486 lw
38.7939 17.7886 mo
39.6523 15.7969 42.4531 15.8765 44.6821 16.2695 cv
47.2861 16.7285 49.0239 19.2114 48.5649 21.8154 cv
48.4893 22.2495 48.356 22.6597 48.1753 23.0396 cv
30.9951 66.999 li
30.2881 68.7715 29.019 68.3496 29.019 68.3496 cv
22.1211 67.1338 li
21.9072 66.1084 li
41.3623 18.7227 li
41.751 17.1655 40.1953 17.7886 40.1953 17.7886 cv
12.562 74.9668 li
14.3789 75.1758 18.0723 74.4229 22.8271 67.2744 cv
14.5923 58.1777 mo
39.1831 17.3218 li
18.1641 10.1738 mo
18.1323 62.833 li
20.626 12.3774 mo
20.4951 58.5518 li
22.9883 14.0776 mo
22.8223 53.7373 li
25.3193 15.3618 mo
25.3623 48.4795 li
27.7881 16.2827 mo
27.687 43.6689 li
30.1079 16.7124 mo
30.0049 38.8735 li
32.582 16.7915 mo
32.5679 33.5693 li
34.9263 16.4775 mo
34.9111 28.7207 li
37.3872 15.5898 mo
37.3193 23.7397 li
@
.389 lw
17.2227 65.1094 mo
17.2227 65.1094 17.4966 64.3662 17.8926 63.7715 cv
18.2495 63.2363 18.377 62.6855 17.6729 62.5605 cv
16.9688 62.4365 16.2969 62.9063 16.1729 63.6104 cv
16.0488 64.3145 16.5186 64.9854 17.2227 65.1094 cv
cp
15.9316 67.6006 mo
16.1748 67.6563 16.4985 67.2393 16.6226 66.5352 cv
16.7466 65.8311 17.5938 65.2656 16.3809 65.0518 cv
15.6768 64.9268 15.0059 65.3975 14.8818 66.1016 cv
14.7578 66.8037 15.2349 67.4395 15.9316 67.6006 cv
cp
14.9048 70.1221 mo
14.9048 70.1221 15.3037 69.6299 15.4277 68.9268 cv
15.5518 68.2227 16.3989 67.8799 15.3535 67.5723 cv
14.6689 67.3701 13.9785 67.9189 13.8545 68.6221 cv
13.7305 69.3262 14.2007 69.9971 14.9048 70.1221 cv
cp
2.91895 29.2676 mo
5.5376 29.8755 li
5.5376 29.8755 4.28076 34.5986 4.4165 38.9233 cv
1.82861 38.9565 li
1.98486 36.0684 mo
3.03076 36.0361 3.92285 35.2412 4.04688 34.1704 cv
4.17188 33.0942 3.47754 32.1123 2.4585 31.8477 cv
4.0625 31.5176 mo
4.36279 31.5703 4.64795 31.3706 4.70068 31.0703 cv
4.75293 30.7715 4.55371 30.4863 4.25391 30.4336 cv
3.95459 30.3804 3.66992 30.5806 3.6167 30.8794 cv
3.56348 31.1792 3.76367 31.4644 4.0625 31.5176 cv
cp
3.19092 38.2944 mo
3.48975 38.3477 3.77588 38.1475 3.82861 37.8486 cv
3.88086 37.5483 3.68066 37.2637 3.38184 37.2104 cv
3.08252 37.1582 2.79688 37.3584 2.74463 37.6572 cv
2.69189 37.9565 2.8916 38.2412 3.19092 38.2944 cv
cp
2.36572 35.3232 mo
2.83887 35.1563 3.21094 34.7466 3.30469 34.2163 cv
3.40771 33.6304 3.14063 33.0654 2.6709 32.7603 cv
@
grestore
gsave
0 80.7881 mo
74.5786 80.7881 li
74.5786 0 li
0 0 li
0 80.7881 li
cp
clp
.272 lw
31.0508 53.9844 mo
30.7539 53.9844 30.5151 54.2236 30.5151 54.5205 cv
30.5151 54.8174 30.7539 55.0557 31.0508 55.0557 cv
31.3481 55.0557 31.5869 54.8174 31.5869 54.5205 cv
31.5869 54.2236 31.3481 53.9844 31.0508 53.9844 cv
cp
33.4487 56.8975 mo
34.2031 56.9912 34.8901 56.4561 34.9849 55.7021 cv
35.0781 54.9482 34.543 54.2607 33.7891 54.166 cv
33.0347 54.0732 32.3481 54.6084 32.2539 55.3623 cv
32.1597 56.1162 32.6948 56.8037 33.4487 56.8975 cv
cp
33.6191 54.9961 mo
33.3218 54.9961 33.083 55.2354 33.083 55.5322 cv
33.083 55.8291 33.3218 56.0684 33.6191 56.0684 cv
33.916 56.0684 34.1548 55.8291 34.1548 55.5322 cv
34.1548 55.2354 33.916 54.9961 33.6191 54.9961 cv
cp
28.2739 54.835 mo
29.0278 54.9287 29.7148 54.3936 29.8101 53.6396 cv
29.9028 52.8857 29.3677 52.1982 28.6138 52.1045 cv
27.8599 52.0107 27.1729 52.5459 27.0781 53.2998 cv
26.9849 54.0537 27.52 54.7412 28.2739 54.835 cv
cp
28.4438 52.9326 mo
28.147 52.9326 27.9077 53.1729 27.9077 53.4697 cv
27.9077 53.7666 28.147 54.0068 28.4438 54.0068 cv
28.7407 54.0068 28.98 53.7666 28.98 53.4697 cv
28.98 53.1729 28.7407 52.9326 28.4438 52.9326 cv
cp
30.3511 53.2754 mo
30.4668 45.0264 li
31.2207 53.1553 mo
31.4009 43.625 li
31.751 53.3145 mo
39.002 45.7256 li
32.2568 53.9229 mo
38.8467 47.127 li
37.186 47.4912 mo
36.6797 47.7627 35.2661 47.8467 35.2661 47.8467 cv
35.2661 48.8184 34.4888 49.6631 33.5161 49.6631 cv
32.5439 49.6631 31.7559 48.874 31.7559 47.9023 cv
31.7559 47.3701 31.9961 46.8408 32.3691 46.5186 cv
32.3691 46.5186 31.8291 46.1934 31.479 45.415 cv
28.189 60.9551 mo
27.5479 60.874 26.9629 61.3291 26.8828 61.9697 cv
26.8037 62.6113 27.2578 63.1953 27.8989 63.2754 cv
28.54 63.3555 29.124 62.9004 29.2041 62.2588 cv
29.2837 61.6182 28.8291 61.0342 28.189 60.9551 cv
cp
31.751 55.8818 mo
31.479 65.4414 li
30.8809 55.8857 mo
30.5449 67.5166 li
30.312 55.8037 mo
22.9189 64.4043 li
29.7671 55.0654 mo
23.1558 62.9287 li
24.5781 62.5889 mo
25.084 62.3164 26.2559 62.2119 26.2559 62.2119 cv
26.2559 61.2383 27.0317 60.3936 28.0049 60.3936 cv
28.9771 60.3936 29.7661 61.1807 29.7661 62.1533 cv
29.7661 62.6846 29.5249 63.2139 29.1528 63.5381 cv
29.1528 63.5381 30.0259 63.8857 30.5449 65.1299 cv
42.145 27.3794 mo
42.7217 27.4512 43.248 27.042 43.3188 26.4653 cv
43.3921 25.8882 42.9829 25.3623 42.4058 25.291 cv
41.8291 25.2192 41.3027 25.6284 41.231 26.2051 cv
41.1587 26.7822 41.5688 27.3071 42.145 27.3794 cv
cp
39.8037 34.0771 mo
40.4819 34.1611 41.1001 33.6792 41.1851 33.001 cv
41.27 32.3232 40.7881 31.7041 40.1089 31.6191 cv
39.4307 31.5352 38.812 32.0161 38.728 32.6953 cv
38.6431 33.373 39.125 33.9922 39.8037 34.0771 cv
cp
39.957 32.3652 mo
39.6899 32.3652 39.4727 32.5811 39.4727 32.8481 cv
39.4727 33.1143 39.6899 33.3311 39.957 33.3311 cv
40.2227 33.3311 40.439 33.1143 40.439 32.8481 cv
40.439 32.5811 40.2227 32.3652 39.957 32.3652 cv
cp
42.1147 34.9873 mo
42.793 35.0713 43.4111 34.5903 43.4961 33.9111 cv
43.5811 33.2334 43.0991 32.6143 42.4209 32.5303 cv
41.7417 32.4453 41.124 32.9272 41.0391 33.6055 cv
40.9541 34.2842 41.436 34.9033 42.1147 34.9873 cv
cp
42.2681 33.2764 mo
42.001 33.2764 41.7847 33.4922 41.7847 33.7583 cv
41.7847 34.0254 42.001 34.2412 42.2681 34.2412 cv
42.5337 34.2412 42.75 34.0254 42.75 33.7583 cv
42.75 33.4922 42.5337 33.2764 42.2681 33.2764 cv
cp
37.457 33.1313 mo
38.1348 33.2153 38.7539 32.7344 38.8389 32.0552 cv
38.9229 31.377 38.4419 30.7583 37.7627 30.6743 cv
37.085 30.5894 36.4658 31.0713 36.3809 31.749 cv
36.2969 32.4282 36.7778 33.0464 37.457 33.1313 cv
cp
37.6099 31.4194 mo
37.3428 31.4194 37.127 31.6353 37.127 31.9023 cv
37.127 32.1694 37.3428 32.3853 37.6099 32.3853 cv
37.877 32.3853 38.0928 32.1694 38.0928 31.9023 cv
38.0928 31.6353 37.877 31.4194 37.6099 31.4194 cv
cp
39.313 31.666 mo
39.728 22.583 li
40.1089 31.6191 mo
40.5337 22.1284 li
40.5591 31.77 mo
46.1621 25.1294 li
41.0771 32.3931 mo
47.147 25.2334 li
45.123 26.167 mo
44.5527 26.2715 43.8491 26.2842 43.8491 26.2842 cv
43.8491 27.1592 43.1509 27.9204 42.2759 27.9204 cv
41.3999 27.9204 40.6909 27.21 40.6909 26.335 cv
40.6909 25.8564 40.9067 25.3804 41.2427 25.0903 cv
41.2427 25.0903 40.792 24.7271 40.4771 24.0273 cv
37.8691 37.5635 mo
37.293 37.4912 36.7671 37.9004 36.6938 38.4771 cv
36.623 39.0542 37.0317 39.5801 37.6089 39.6523 cv
38.186 39.7231 38.7119 39.3145 38.7827 38.7373 cv
38.855 38.1611 38.4458 37.6353 37.8691 37.5635 cv
cp
40.8701 33.7422 mo
40.584 42.2236 li
40.0918 34.1055 mo
39.8057 43.3916 li
39.002 33.6904 mo
34.2031 39.6563 li
38.7158 32.6523 mo
32.958 39.7344 li
34.9419 38.8394 mo
35.5649 38.8003 36.1299 38.6943 36.1299 38.6943 cv
36.1299 37.8184 36.8291 37.0571 37.7041 37.0571 cv
38.5791 37.0571 39.2891 37.7671 39.2891 38.6421 cv
39.2891 39.1211 39.1299 39.4824 38.7939 39.7734 cv
38.7939 39.7734 39.4561 40.2402 39.8447 41.252 cv
26.1348 63.0674 mo
23.7749 63.0674 21.8608 64.9805 21.8608 67.3408 cv
21.8608 67.3408 29.9751 68.8652 30.3228 68.2031 cv
30.4541 67.9512 30.4087 67.6357 30.4087 67.3408 cv
30.4087 64.9805 28.4961 63.0674 26.1348 63.0674 cv
cp
@
.249 lw
18.1396 10.5454 mo
18.3804 10.5884 18.6113 10.4263 18.6533 10.1855 cv
18.6963 9.94434 18.5356 9.71436 18.2935 9.67139 cv
18.0527 9.62842 17.8223 9.79053 17.7793 10.0313 cv
17.7363 10.2725 17.8984 10.5024 18.1396 10.5454 cv
cp
@
grestore
gsave
1.63477 75.2393 mo
48.8809 75.2393 li
48.8809 .785156 li
1.63477 .785156 li
1.63477 75.2393 li
cp
clp
.272 lw
21.0117 5.95996 mo
19.7671 6.85449 li
19.7671 6.85449 21.5571 8.09961 19.9609 9.50098 cv
19.9609 9.50098 21.4009 11.3687 21.6348 11.4849 cv
21.6631 11.5337 mo
21.8379 11.0098 22.333 10.6318 22.916 10.6318 cv
23.646 10.6318 24.2368 11.2227 24.2368 11.9517 cv
24.2368 12.3257 24.082 12.6636 23.832 12.9038 cv
25.2617 13.7817 li
25.3379 13.126 25.897 12.6157 26.5737 12.6157 cv
27.3027 12.6157 27.895 13.2065 27.895 13.9365 cv
27.895 14.2388 27.793 14.5176 27.6221 14.7407 cv
29.1831 15.2207 li
29.1831 14.4907 29.7739 13.8999 30.5039 13.8999 cv
31.2329 13.8999 31.8247 14.4907 31.8247 15.2207 cv
31.8247 15.4639 31.7588 15.6919 31.644 15.8877 cv
31.644 15.8877 32.9971 16.3486 33.853 15.4927 cv
34.9819 14.3638 36.415 16.0259 36.415 16.0259 cv
21.1699 5.88477 mo
21.1699 6.63477 21.7788 7.24365 22.5298 7.24365 cv
22.9048 7.24365 23.2441 7.0918 23.4907 6.8457 cv
24.1958 7.74365 li
23.938 7.9917 23.7769 8.33984 23.7769 8.72461 cv
23.7769 9.47559 24.3857 10.085 25.1367 10.085 cv
25.4619 10.085 25.7617 9.96973 25.9961 9.77783 cv
26.9971 10.4917 li
26.8799 10.6929 26.812 10.9268 26.812 11.1768 cv
26.812 11.9268 27.4209 12.5356 28.1719 12.5356 cv
28.6479 12.5356 29.0669 12.291 29.3101 11.9199 cv
30.3198 12.2847 li
30.2407 12.4565 30.1968 12.6479 30.1968 12.8496 cv
30.1968 13.6006 30.8057 14.209 31.5571 14.209 cv
32.3081 14.209 32.8408 13.8306 32.8408 13.0806 cv
33.7158 13.2417 li
33.6797 13.3647 33.6597 13.4937 33.6597 13.6279 cv
33.6597 14.3789 34.269 14.9868 35.02 14.9868 cv
35.771 14.9868 36.3789 14.3789 36.3789 13.6279 cv
37.395 13.3228 li
37.5381 13.9209 38.0747 14.3647 38.7158 14.3647 cv
39.4668 14.3647 40.0757 13.7559 40.0757 13.0059 cv
40.0757 12.8936 40.062 12.7856 40.0371 12.6826 cv
41.0229 12.2227 li
41.0991 12.9028 41.6748 13.4307 42.374 13.4307 cv
43.019 13.4307 43.5581 12.9819 43.6978 12.3809 cv
44.6807 13.0957 li
44.4131 13.3447 44.2441 13.6997 44.2441 14.0947 cv
44.2441 14.8457 44.853 15.4536 45.604 15.4536 cv
45.9121 15.4536 46.1978 15.3506 46.4258 15.1768 cv
46.4258 15.1768 46.7319 15.8037 46.4209 16.583 cv
@
.311 lw
19.75 2.50586 mo
19.0972 2.92871 18.4292 3.05762 18.2568 2.79297 cv
18.085 2.52783 18.4741 1.96875 19.127 1.5459 cv
19.7798 1.12305 20.4482 .993652 20.6201 1.25879 cv
20.792 1.5249 20.4028 2.08301 19.75 2.50586 cv
cp
15.688 5.8208 mo
15.0352 6.24463 14.3662 6.37305 14.1938 6.10791 cv
14.022 5.84277 14.4121 5.28369 15.0649 4.86084 cv
15.7178 4.43799 16.3862 4.30957 16.5581 4.57471 cv
16.73 4.83984 16.3398 5.39795 15.688 5.8208 cv
cp
13.0352 6.93262 mo
13.0352 6.93262 14.436 9.73389 14.6309 10.0068 cv
@
grestore
gsave
0 80.7881 mo
74.5786 80.7881 li
74.5786 0 li
0 0 li
0 80.7881 li
cp
clp
.389 lw
11.4785 18.4893 mo
11.4785 18.4893 12.0166 15.894 10.1196 14.8008 cv
8.75488 14.0142 8.02686 15.9258 8.97168 16.355 cv
9.91748 16.7842 10.9775 16.8398 11.4785 18.4893 cv
cp
@
.273 lw
8.28809 17.959 mo
7.80225 17.959 7.4082 18.353 7.4082 18.8389 cv
7.4082 19.3257 7.80225 19.7197 8.28809 19.7197 cv
8.77393 19.7197 9.16797 19.3257 9.16797 18.8389 cv
9.16797 18.353 8.77393 17.959 8.28809 17.959 cv
cp
9.06104 17.6089 mo
8.38184 17.1816 7.78125 17.5757 7.354 18.2559 cv
6.92725 18.9346 6.83594 19.6426 7.51514 20.0688 cv
8.19385 20.4961 9.09082 20.292 9.51807 19.6118 cv
9.94482 18.9326 9.74023 18.0366 9.06104 17.6089 cv
cp
8.67725 20.6606 mo
8.45801 20.6606 8.28125 20.8379 8.28125 21.0566 cv
8.28125 21.2759 8.45801 21.4526 8.67725 21.4526 cv
8.896 21.4526 9.07324 21.2759 9.07324 21.0566 cv
9.07324 20.8379 8.896 20.6606 8.67725 20.6606 cv
cp
3.76709 49.9668 mo
3.41699 50.2588 3.34717 50.8096 3.60986 51.1982 cv
3.87305 51.5879 4.36914 51.666 4.71924 51.374 cv
5.06885 51.082 5.14014 50.5303 4.87695 50.1416 cv
4.61377 49.7529 4.11719 49.6738 3.76709 49.9668 cv
cp
4.13477 49.2227 mo
3.41504 49.29 3.1958 49.9648 3.25586 50.7637 cv
3.31592 51.5635 3.63184 52.1846 4.35205 52.1182 cv
5.0708 52.0518 5.60596 51.3486 5.5459 50.5498 cv
5.48584 49.75 4.854 49.1553 4.13477 49.2227 cv
cp
4.39795 47.8955 mo
4.22314 48.0264 4.18799 48.2744 4.31885 48.4502 cv
4.4502 48.626 4.69922 48.6611 4.87402 48.5303 cv
5.04883 48.3975 5.08398 48.1494 4.95313 47.9746 cv
4.8208 47.7998 4.57324 47.7637 4.39795 47.8955 cv
cp
5.83691 21.4849 mo
7.93799 22.3018 li
7.93799 22.3018 5.95313 27.0498 5.60303 28.7227 cv
3.42383 28.0996 li
7.7041 22.6528 mo
4.62988 24.52 li
6.03125 27.439 li
4.59082 28.373 li
3.85205 27.0498 li
6.80908 25.0259 li
5.48584 22.4971 li
6.69287 21.8359 li
7.58789 23.2749 li
2.21484 40.1929 mo
4.24219 40.0938 li
4.24219 40.0938 4.3291 45.2393 4.64697 46.9111 cv
2.62695 47.2188 li
4.17725 40.5088 mo
2.32178 43.457 li
4.53418 45.5635 li
3.68701 46.998 li
2.59912 46.085 li
4.2998 43.042 li
2.29297 41.2598 li
3.04688 40.1689 li
4.30615 41.126 li
@
grestore
gsave
1.63477 75.2393 mo
48.8809 75.2393 li
48.8809 .785156 li
1.63477 .785156 li
1.63477 75.2393 li
cp
clp
.389 lw
6.42041 51.5635 mo
6.42041 51.5635 6.88721 53.8984 6.03125 54.6768 cv
5.17529 55.4541 4.31934 55.6104 4.55225 56.5439 cv
4.78613 57.4775 5.17529 57.7109 5.79736 57.5557 cv
6.42041 57.4004 8.52148 54.6768 6.42041 51.5635 cv
cp
6.49854 57.0107 mo
6.49854 57.0107 6.49854 58.5674 11.0112 64.7158 cv
14.9854 70.127 13.8135 70.6299 13.5801 72.6533 cv
18.9492 63.7813 mo
13.5024 74.9883 li
18.0151 67.1279 mo
15.4473 72.7314 li
16.6924 72.1084 li
18.4053 68.0615 li
18.0151 67.1279 li
cp
19.0273 68.2959 mo
21.3623 67.8281 li
21.3623 67.8281 19.0273 71.252 17.3931 71.9531 cv
19.0273 68.2959 li
cp
@
grestore
gsave
0 80.7881 mo
74.5786 80.7881 li
74.5786 0 li
0 0 li
0 80.7881 li
cp
clp
16.0703 18.2559 mo
9.84424 20.5127 li
12.4902 24.8706 li
7.04541 27.3257 li
10.2334 31.3296 li
5.68945 33.7158 li
14.4751 21.4858 mo
8.24902 23.7417 li
11.3232 27.9058 li
6.34229 30.4375 li
12.1992 16.7466 mo
13.8911 21.6016 li
5.95313 30.7847 mo
9.76611 34.3647 li
5.01904 37.0889 li
5.4082 34.3647 mo
9.5332 37.3994 li
4.86426 40.2017 li
5.01904 38.6445 mo
9.49316 40.6084 li
5.07129 43.3584 li
4.94141 41.6797 mo
9.68945 43.5479 li
5.48633 46.3496 li
5.17529 44.8701 mo
10.2334 46.2715 li
6.03125 49.6963 li
5.56445 47.5947 mo
10.8564 49.0732 li
7.27637 53.5088 li
13.5801 56.1553 li
13.5801 56.1553 9.61133 56.5439 8.91016 58.1777 cv
8.91016 58.1006 mo
11.7124 51.7188 li
6.34229 50.4736 li
@
.389 lw
21.7637 61.4648 mo
20.7681 60.8809 19.248 61.3682 18.624 62.6855 cv
18.3271 63.3145 19.1831 63.7822 20.0391 64.5596 cv
20.894 65.3369 21.4951 66.0596 22.2319 64.8018 cv
22.9697 63.542 22.7598 62.0488 21.7637 61.4648 cv
cp
@
.272 lw
20.0391 64.249 mo
40.9731 17.6333 li
29.6689 42.7344 mo
30.2661 43.0361 31.106 42.5791 31.5469 41.7119 cv
31.9863 40.8457 31.8613 39.8965 31.2651 39.5942 cv
30.668 39.2915 29.8281 39.7485 29.3872 40.6152 cv
28.9473 41.4824 29.0742 42.4316 29.6689 42.7344 cv
cp
31.167 42.3799 mo
24.4751 50.6299 li
22.8413 63.5479 li
28.9883 41.29 mo
27.1211 52.6523 li
19.0273 61.6025 li
25.7983 48.917 mo
25.7983 53.8975 li
24.1641 52.6523 mo
27.5879 50.1631 li
29.6113 39.8125 mo
35.292 33.5083 li
36.2261 26.1934 li
40.4282 20.6685 li
38.7163 21.3687 mo
37.938 26.9717 li
33.1133 32.1855 li
32.1792 40.9795 li
@
.249 lw
20.5493 12.8145 mo
20.79 12.8564 21.02 12.6953 21.063 12.4546 cv
21.105 12.2134 20.9443 11.9834 20.7031 11.9404 cv
20.4614 11.8975 20.2324 12.0596 20.1895 12.3008 cv
20.147 12.5415 20.3081 12.7715 20.5493 12.8145 cv
cp
22.9111 14.5146 mo
23.1523 14.5566 23.3823 14.3955 23.4253 14.1543 cv
23.4673 13.9136 23.3062 13.6826 23.0654 13.6406 cv
22.8242 13.5977 22.5942 13.7588 22.5513 14.0005 cv
22.5093 14.2417 22.6704 14.4717 22.9111 14.5146 cv
cp
25.2432 15.7983 mo
25.4834 15.8403 25.7144 15.6797 25.7563 15.4385 cv
25.7993 15.1963 25.6382 14.9668 25.396 14.9248 cv
25.1553 14.8813 24.9253 15.0425 24.8833 15.2847 cv
24.8403 15.5254 25.001 15.7554 25.2432 15.7983 cv
cp
27.7114 16.7197 mo
27.9521 16.7627 28.1821 16.6016 28.2251 16.3594 cv
28.2671 16.1187 28.1064 15.8887 27.8652 15.8457 cv
27.623 15.8037 27.394 15.9644 27.3511 16.2056 cv
27.3091 16.4478 27.4702 16.6777 27.7114 16.7197 cv
cp
30.0322 17.1494 mo
30.272 17.1914 30.5034 17.0303 30.5454 16.7896 cv
30.5884 16.5483 30.4272 16.3174 30.186 16.2754 cv
29.9443 16.2324 29.7144 16.3936 29.6724 16.6357 cv
29.6294 16.8765 29.79 17.1064 30.0322 17.1494 cv
cp
32.5054 17.2285 mo
32.7461 17.2705 32.9761 17.1094 33.019 16.8687 cv
33.061 16.6274 32.9004 16.3965 32.6592 16.3545 cv
32.417 16.3115 32.188 16.4727 32.145 16.7144 cv
32.103 16.9556 32.2642 17.1855 32.5054 17.2285 cv
cp
34.8491 16.9146 mo
35.0903 16.9575 35.3213 16.7964 35.3633 16.5547 cv
35.4063 16.3135 35.2451 16.0835 35.0034 16.0405 cv
34.7622 15.9985 34.5322 16.1597 34.4893 16.4004 cv
34.4473 16.6426 34.6084 16.8726 34.8491 16.9146 cv
cp
37.3101 16.0264 mo
37.5513 16.0684 37.7822 15.9077 37.8242 15.6665 cv
37.8672 15.4248 37.7061 15.1943 37.4644 15.1523 cv
37.2231 15.1094 36.9932 15.2705 36.9512 15.5127 cv
36.9082 15.7534 37.0693 15.9834 37.3101 16.0264 cv
cp
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTra